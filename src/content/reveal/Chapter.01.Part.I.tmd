---
title: {{TITLE}}
theme: "comp421"
separator: "^---"
verticalSeparator: "^----"
notesSeparator: "^Note:"
revealOptions:
    transition: fade


---

### Worksheet stuff

- Before class
  - Did you check the [grades page]({{HTTPS_FQDN}}/grades)?
  - [Homework A0]({{HTTPS_FQDN}}/homeworks/A0) due by 11:59:59 PM
- Today's class remote
  - All in-class worksheets due by 11:59:59 PM
- Yet to submit
  - [Teams worksheet]({{HTTPS_FQDN}}/worksheets/worksheet-00-teams) out, not submittable
    - Who do you want to sit next to for the games?
  - Will be submittable Feb 1st

Note:

Bring up {{HTTPS_FQDN}}/pages/worksheets/worksheet-00-grading

Bring up {{HTTPS_FQDN}}/pages/worksheets/worksheet-00-teams

---

### Today's class

- By the end of class you should know
  - What is a database and a DBMS
  - Why use a DBMS
  - Data models used in DBMS
  - Two database languages
- Tomorrow's class we will finish off chapter 1
  - Different DBMS managers
  - Different DBMS users


Note:

### Outline
 - Database-System Applications
 - Purpose of Database Systems
 - View of Data
 - Database Languages
 - Database Design
 - Database Engine
 - Database Architecture
 - Database Users and Administrators
 - History of Database Systems

https://www.db-book.com/slides-dir/PDF-dir/ch1.pdf

---

### Database Systems
 - DBMS contains information about a particular enterprise
   - Collection of interrelated data
   - Set of programs to access the data 
 - DBMS are used to manage data that are:
   - Highly valuable
   - Relatively large
   - Concurrently accessed by multiple users and applications
 - A modern DBMS is a complex software system whose task is to manage a large, complex collection of data.
 - Databases touch all aspects of our lives!!!

Note:

**Section 1.1** Database applications

1. Draw the difference between the database or data and the DBMS or system
2. At high level, why are databases used
  - Value or size of the data
  - Value is not always money: medical trials, corporate secrets
  - Size is not megabytes: coverage
3. DBMS is a large, complex system of software
3. DBMS touch all parts of our life

- Ask students what they did before coming to class..  
 - Databases were used for that

---

### Database Application Examples
- Any large enterprise
 - The sales, accounting, HR departments
 - Manufacturing, airlines, telecommunications
-  Large organizations
   - Universities, societies, social groups
-  Financial services
   - Banks, credit cards, retailers, advertisers
-  Collections
   - Documents, navigation systems, 
-  Database are ubiquitous
   - COMP 421 is a full stack DBMS architecture system
     - Grades page is similar to bank balance page
     - Can show you code
     - Each page is tailored to each student
     - Database allows this

Note:

The take away is that every large group uses a database

 
UNC uses a database

 
Every bank uses a database

 
Drug manufacturers, navigation systems

 
Even this class is a database system

Ask students if they want to see how this class works

---


{{HIDDEN}}

### Database Applications Examples
 - Enterprise Information
   - Sales: customers, products, purchases
   - Accounting: payments, receipts, assets
   - Human Resources: Information about employees, salaries, payroll taxes.
 - Manufacturing: management of production, inventory, orders, supply chain.
 - Banking and finance
   - customer information, accounts, loans, and banking transactions.
   - Credit card transactions
   - Finance:  sales and purchases of financial instruments (e.g., stocks and bonds; storing real-time market data
 - Universities:  registration, grades


---

{{HIDDEN}}

### Database Applications Examples (Cont.)
 - Airlines: reservations, schedules
 - Telecommunication: records of calls, texts, and data usage, generating monthly bills, maintaining balances on prepaid calling cards
 - Web-based services
   - Online retailers: order tracking, customized recommendations
   - Online advertisements
 - Document databases
 - Navigation systems: For maintaining the locations of varies places of interest along with the exact routes of roads, train systems, buses, etc.


---

### Purpose of Database Systems

Database systems offer solutions to all the problems below !!!

- Data redundancy and inconsistency
  - Data is stored in multiple files and formats
  - Duplication of information
  - Data inconsistencies
- Difficulty in accessing data 
  - Data or users on different systems
  - Program written for each request
- Data isolation 
  - Multiple files and formats
- Integrity problems
  - Can a bank balance be less than zero?
  - Where is the overdraft fee code? 
  - How to come up with new overdraft fees?
   - Need to add new constraints or change existing ones.

Note:

**Section 1.2** Purpose of Database Systems

1. What if your name and address appeared in multiple places in different formats?
2. What if everyone had to log onto Amazon to buy something
3. What if some data is in Excel spread sheets, some in Google sheets
4. Keeping things <q>in line</q> with the rules

---

### Purpose of Database Systems (Cont.)

- Atomicity of updates
  - No inconsistent states
  - No partial updates
    - Example: Transfer of funds from one account to another should either complete or not happen at all
  - <q>All or nothing</q>

Note:

Atomicity says that an entire transaction occurs or nothing occurs.

---

### Purpose of Database Systems (Cont.)

- Concurrent access by multiple users
  - Concurrent access needed for performance
  - Each user/application runs as if only user/app
    - Uncontrolled concurrent accesses $\rightarrow$ inconsistencies
      - Ex: Two people reading a balance (say 100) and updating it by withdrawing money (say 50 each) at the same time
      - Final balance $50 or 0?

Note:

Concurrency says that all users appear to have their own view of the database

 

---

### Purpose of Database Systems (Cont.)

- Security problems
  - Hard to provide user access to some, but not all, data
  - Should professors see your grades?
  - Should professors see your finances?

Note:

Security can be granted at a fine data field level!


---

### University Database Example

We will use the university database for the entire semester

- Data consists of information about:
  - Students
  - Instructors
  - Classes
- Application program examples:
  - Add new students, instructors, and courses
  - Register students for courses, and generate class rosters
  - Assign grades to students
    - Compute grade point averages (GPA)
    - Generate transcripts

Note:

For this entire semester we'll use the university databases.

Has instructors, students classes, class rooms, etc

 
Has applications that add students, instructors, etc

---

### The view of data in a DBMS

- DBMS - a collection of interrelated data &amp; set of programs
  - Allow users to access and modify these data
  - DBMS provides users with an abstract view of the data.
  - Abstraction is done with several models 
- Model: A collection of conceptual tools for describing data, data relationships, data semantics, and consistency constraints.
- Abstraction: Hides complexity of data structures, to represent data in the database from users through several levels of data abstraction.

Note:

**Section 1.3** View of data

DBMS allows uses to access data but to do that,
it provides a model of how the data is stored
and an abstraction to facilitate users' and programs' views

 
The model is a _collection_ of tools for $\dots$  

 
Abstraction is done to hide details  
What if you came up with a new-better file system  

---

### Data Models used by a DBMS

- A collection of tools are used for describing the
  - Data 
  - Data relationships
  - Data semantics
  - Data constraints

---

### Data Models used by a DBMS (cont.)


1. Relational model
   - Users/apps see the data as tables
1. Entity-Relationship data model
   - Design of how the entities relate
1. Object-based data models
   - Used by OOP to access data
   - Will only cover lightly
1. Semi-structured data model  (XML)
   - Will not cover
1. Other older models not covered
   - Network model 
   - NoSQL
   - Hierarchical model


---

### Relational Model

- All the data is stored in various tables.
- Example of tabular data in the relational model
<div class="row">
 <div class="twocolumns">
  <figure>
   <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.Figure.1.1.a.TheInstructorTable.png">
   <figcaption>Figure 1.1 a The instructor table</figcap>
  </figure>
 </div>
 <div class="twocolumns">
  <p />&nbsp; <br/>
  <p />&nbsp; <br/>
  <p />&nbsp; <br/>
  <figure style="float:right">
   <img src="{{HTTPS_FQDN}}/static/images/TedCodd.png" style="width:30%; float:right">
   <figcaption>Inventor of the<br/>relational database model</figcap>
   </figure>
  </figure>
 </div>
</div> 


Note:

In the relational model, the abstract view of the data is a table.

Each row represents and entity

Each column represents a property of the entity

Interesting note from https://news.ycombinator.com/item?id=33649390

Fred Brooks said the most important management decision was sending Ted Codd to graduate school, where Codd laid the foundation for what became relational databases.

---

### A sample relational database

- Relationship between instructors &amp; departments
<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.Figure.1.1.InstructorAndDepartmentTable.png" style="width:40%">
 <figcaption>Figure 1.1 Relationship between instructors &amp; departments</figcaption>
</figure>

Note:

Show how you would find all the professors in each department

https://comp421.cs.unc.edu/sql/interpreter/Chapter.01.Figure.1.1

---

### Levels of Abstraction
<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.Figure.1.2.TheThreeLevelsOfDataAbstraction.png" style="width:45%">
 <figcaption>Figure 1.2 The three levels of data abstraction</figcap>
</figure>

- **Physical level**: How records are store (e.g., instructor)
- <b>Logical level</b>: What data stored and data relationships
```
type instructor = record
   ID : string; 
   name : string;
   dept_name : string;
   salary : integer;
end
```
- <b>View level</b>: Hide details from apps / users
  - Views can also hide information for security purposes.

Note:

The physical layer or level tells how the data is store.  Integers? Floats, etc

 
The logical level shows what data is stored.
- Provides physical data independence

 
The view level hides **details** from the users
 - Should all employees see all other employees salary?
 - Should managers see the salaries of the employees they manage?


---

### Instances and Schemas

- Similar to types and variables in programming languages
- **Logical Schema:** the overall logical structure of the database 
  - Example: The database consists of information about a set of bank customers, accounts, and the relationship between them
- <b>Physical schema:</b> the overall physical database structure
  - Example: What kinds of files and indices used at the bank
- <b>Instance</b> – the database content at a particular point in time 
  - Example the value of a particular customer's balance

Note:

Logical schema is analogous to the data structures

 
Physical schema is analogous to physical layout

 
An instance is analogous to the value of a variable


---

### Physical Data Independence 
 - **Physical Data Independence**: the ability to modify the physical schema without changing the logical schema
   - Keep physical &amp; logical levels dependencies well defined
   - Interfaces between levels and components should be well defined so that changes in some parts do not seriously influence others.
   - Applications depend on the logical schema


---

### Data Definition Language (DDL)

- Specification notation for defining the database schema
```sql 
create table instructor (
  ID char(5),
  name varchar(20)
  dept_name varchar(20),
  salary numeric(8,2))
```
- DDL compiler generates table templates in a data dictionary
- Data dictionary contains metadata (i.e., data about data)
  - Database schema 
  - Integrity constraints
  - Primary key (ID uniquely identifies each instructor)
  - Authorization
    - Who can access what

Note:

**Section 1.4** Database Languages

Data Definition Language, DDL, defines the tables

DDL information is store in dictionary are used to check
- domain constraints
- referential integrity
- authorization, etc

---

### Data Manipulation Language (DML)

- Language for accessing / updating data
  - DML also known as query language
- Two types of DMLs specify the data to retrieve
  - **Procedural DML:** 
    - Requires user to say _how_ to get the data.
  - **Declarative DML:**
    - No requirement for user to know how to get the data
    - Easier to use / learn than procedural
    - Focus of this course
- Part of DML that involves info retrieval is called a **query** language.
    - Normal parlance uses them synonymously

Note:

Once the data is defined, DML is used to look up and update data

We will focus on declarative DML.  
- They are easier
- Declarative DML is what most people think of when they think of SQL
- Show db.py grades def grades

Procedural DML 
My db.py shows how to tell if Answers_exist_for_user_and_key or all_assessments


---

### SQL Query Language

- SQL query language is non-procedural.
  - A query takes table(s) as input and always returns a single table
  - <a href="{{HTTPS_FQDN}}/sql/interpreter/Chapter.01.FindAllInstructorsInCSDepartment">Example</a>: <q>Find all instructors in the computer science department</q>
```sql
SELECT name
  FROM instructor
 WHERE dept_name = 'Comp.Sci.'
```
- SQL is <b>NOT</b> a Turing machine equivalent language
  - Classical SQL is considered non-Turing Complete
  - To be able to compute complex functions SQL is usually embedded in some higher-level language
  - Application programs generally access databases through one of
    - Language extensions to allow embedded SQL
    - App interfaces send SQL queries database, result in variables
    - Examples:  JDBC, and psycopg

Note:


Go out to REDDIT and there will be discussions about whether SQL is Turing complete.

What it means is, can SQL store values and make decisions off those values.
If-then-else statements.

 
Let's look at one example of what you can do with SQL

{{HTTPS_FQDN}}/sql/interpreter/Chapter.01.FindAllInstructorsInCSDepartment

 
The latest PL/SQL allows for TC, but we won't be using it.
So in this class we'll say SQL is not Turing complete

JDBC - Java
psycopg - Python

We'll pick that up next class

---

### Epilogue

- You should know:
  - What a databases is and why it's used
  - We won't build databases
  - What is a relational data model
  - The two languages that make up SQL
