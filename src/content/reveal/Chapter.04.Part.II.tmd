---
title: {{TITLE}}
theme: "comp550"
separator: "^---"
verticalSeparator: "^----"
notesSeparator: "^Note:"
revealOptions:
    transition: fade

---

### Announcements

- Game
  - Next Thursday 9/28
  - Sit next to friends in class
  - Collaborate but don't copy
  - Sample database in homework A2
- [Grace Hopper](https://www.rejectedprincesses.com/blog/modern-worthies/grace-hopper)<p/>
  <img src="https://www.rejectedprincesses.com/wp-content/uploads/2015/02/tumblr_inline_niya1cfs6I1rr1oyg.jpg" style="width: 25%"/>

Note:

People going to GH should work together.  Have all day to complete 


---

### Homework 2

- There is a problem with the checker for question 4

- You must download.  See [Piazza](https://piazza.com/class/li0qk54lj3836x/post/82)

<img src="{{HTTPS_FQDN}}/static/images/Homework.A2.Q4.png" style="width:50%"/>

---

### Joins revisited

- Inner join WHERE clause use primary keys
- Consider finding student names who are also instructors

```sql
SELECT S.name
  FROM Student S, Instructor I
 WHERE S.name = I.name
```

<img src="{{HTTPS_FQDN}}/static/images/Chapter.02.Figure.2.9.Schema.University.Database.png" style="width: 50%"/>

Note:

You have university.sqlite on your machine in A1 directory.

---

### Chapter 4:  Intermediate SQL

- By the end of class you should know
  - Transactions
  - Integrity Constraints
  - SQL Data Types and Schemas
  - Index Definition in SQL


Note:

https://www.db-book.com/slides-dir/PDF-dir/ch4.pdf


---

### Transactions

- A **transaction** consists of a sequence of query and/or update statements and is a logical “unit” of work
- Transaction begins _implicitly_ when an SQL statement is executed.
    - Explicitly **BEGIN TRANSACTION**
- The transaction must end with one of the following statements:
  - **Commit work:**
    - Transaction updates become permanent in the database
  - **Rollback work:**
    - Transaction updates undone
- Transactions are **atomic**
  - Either fully executed or rolled back as if it never occurred
- Isolation from concurrent transactions
  - User perception that they are only user of database


---

### Integrity Constraints

- Integrity constraints guard against accidental damage to the database, by ensuring that authorized changes to the database do not result in a loss of data consistency. 
  - Checking accounts must have a balance $\ge$ \$0.00
  - Bank employee salary must be $\ge$ \$14.00/hour
  - Customers must have a (non-null) phone number
  - Each student must have an 8-digit PID


---

### Constraints on a Single Relation

- **not null** 
- **primary key**
- **unique**
- **check**(P), where P is a predicate


---

### Not Null Constraints 

- <b>not null</b>
  - Declare $name$ and $budget$ to be **not null**

```
CREATE TABLE Department (dept_name  varchar(20) NOT NULL,
                         building   varchar(15),
                         budget     numeric(12,2) check (budget > 0),
                         primary key (dept_name));
```

- Any attempt to insert a NULL [dept_name fails]({{HTTPS_FQDN}}/sql/interpreter/Chapter.04.IC.not.null)

Note:

{{HTTPS_FQDN}}/sql/interpreter/Chapter.04.IC.not.null

---

### Unique Constraints 

- **unique**($A_1, A_2, \dots A_m$)
  - The unique specification states that the attributes $A_1$, $A_2$, $\dots$ $A_m$ form a candidate key.
  - Candidate keys are permitted to be null (in contrast to primary keys).
- Assume each [student should have a unique email]({{HTTPS_FQDN}}/sql/interpreter/Chapter.04.unique)
```
create table student (ID        varchar(5),
                      name      varchar(20) not null,
                      dept_name varchar(20),
                      tot_cred  numeric(3,0) check (tot_cred >= 0),
                      email     text,
                      unique(email),
                      primary   key (ID));
```
- Test
  - Can an email be null?
  - Can two students have a null email?
  - Can two students have the same, non-null email?

Note:

{{HTTPS_FQDN}}/sql/interpreter/Chapter.04.unique

---

### The check clause

- **Check**(P) clause takes a predicate P
  - Every tuple in the relation satisfies the predicate
  - Checked on every insert and update
- Ensure [semester is one of Fall, Winter, Spring, or Summer]({{HTTPS_FQDN}}/sql/interpreter/Chapter.04.checks)
```
create table section
   (course_id varchar (8),
    sec_id varchar (8),
    semester varchar (6),
    year numeric (4,0) check (year > 1701 and year < 2100),
    building varchar (15),
    room_number varchar (7),
    time slot id varchar (4), 
    primary key (course_id, sec_id, semester, year),
    check (semester in ('Fall', 'Winter', 'Spring', 'Summer')))
```

Note:

{{HTTPS_FQDN}}/sql/interpreter/Chapter.04.unique

---

### Referential Integrity

- Ensures attribute in one relation appears in another relation.
  - If dept_name “Biology” is in an $instructor$ tuple then<br/> a unique $department$ tuple has “Biology” dept_name
- Let $A$ be a set of attributes, $R, S$ relations, and $A \in R, S$
  - Let $A$ be primary key of $S$
  - $A$ is an attribute set and a  **foreign key** of $R$
    - $\forall A \in R \rightarrow A \in S$
- [Foreign keys]({{HTTPS_FQDN}}/sql/interpreter/Chapter.04.foreign.key) _can be specified_ in **create table** statement 
  - Foreign key references the primary-key or unique attribute
  - If referenced attribute not specified, primary key used
```
foreign key (dept_name) references department
```

NOTE:

SQLite requires the PRAGMA FOREIGN_KEYS = ON

Also if foreign_key or foreign key without parenthesis it passes

Also if transaction fails, you may have to refresh your page

{{HTTPS_FQDN}}/sql/interpreter/Chapter.04.foreign.key

---

### Cascading Actions in Referential Integrity

- When a referential-integrity constraint is violated, the normal procedure is to reject the action that caused the violation.
- An alternative, in case of [delete or update is to cascade]({{HTTPS_FQDN}}/sql/interpreter/Chapter.04.cascade)
```
create table course (
(…
dept_name varchar(20),
foreign key (dept_name) references department
 on delete cascade
 on update cascade,
. . .) 
```
- Instead of cascade we can use :  
  - **set null**
  - **set default**


Note:

{{HTTPS_FQDN}}/sql/interpreter/Chapter.04.cascade

---

### Integrity Constraint Violation During Transactions

- Consider:
```
create table person(
   ID char(10),
   name char(40),
   mother char(10),
   father car(10),
   primary key ID,
   foreign key father references person,
   foreigh key mother references person)
```
- How to insert a tuple without causing constraint violation?
  - Insert [father and mother of a person before inserting person]({{HTTPS_FQDN}}/sql/interpreter/Chapter.04.father.mother.person)
  - OR, set father and mother to null initially, update after inserting all persons (not possible if father and mother attributes declared to be **not null**) 
  - OR defer constraint checking

Note:

{{HTTPS_FQDN}}/sql/interpreter/Chapter.04.father.mother.person

---

### Complex Check Conditions

- The predicate in the check clause can be an arbitrary predicate that can include a subquery.
```
check (time_slot_id in (select time_slot_id from time_slot))
```
  - The check condition states that the time_slot_id in each tuple in the section relation is actually the identifier of a time slot in the time_slot relation.
  - The condition has to be checked not only when a tuple is inserted or modified in section, but also when the relation time_slot changes


---

{{HIDDEN}}

### Assertions

- An **assertion** is a predicate expressing a condition that we wish the database always to satisfy
- The following constraints, can be expressed using assertions:
- For each tuple in the $student$ relation, the value of the attribute $tot_cred$ must equal the sum of credits of courses that the student has completed successfully.
- An instructor cannot teach in two different classrooms in a semester in the same time slot
- An assertion in SQL takes the form:

```
create assertion <assertion-name> check(<predicate>)
```


---

### Built-in Data Types in SQL

- **date:**  Dates, containing a (4 digit) year, month and date
  - Example:  date '2005-7-27'
- **time:** Time of day, in hours, minutes and seconds.
  - Example: **time** '09:00:30'   **time** '09:00:30.75'
- **timestamp:** date plus time of day
  - Example:  **timestamp** '2005-7-27 09:00:30.75'
- **interval:** period of time
  - Example: **interval** '1' day
  - Subtracting a date/time/timestamp value from another gives an interval value
  - Interval values can be added to date/time/timestamp values


---

{{HIDDEN}}

### Large-Object Types

- Large objects (photos, videos, CAD files, etc.) are stored as a _large object_:
  - **blob**: binary large object -- object is a large collection of uninterpreted binary data (whose interpretation is left to an application outside of the database system)
  - **clob**: character large object -- object is a large collection of character data
- When a query returns a large object, a pointer is returned rather than the large object itself.


---

{{HIDDEN}}


### User-Defined Types

- **create type** construct in SQL creates user-defined type
- Not supported in SQLite
```
create type Dollars as numeric (12,2) final
```
- Example:
```
create table department
   (dept_name varchar(20),
    building varchar(15),
    budget Dollars)
```

---

{{HIDDEN}}

### Domains

- **create domain** construct in SQL-92 creates user-defined domain types
<p><b>create domain </b><i>person_name</i><b> char</b>(20) <b>not null</b></p>
- Types and domains are similar.  Domains can have 
<p>constraints, such as <b>not null</b>, specified on them.</p>
- Example:
<p><b>create domain </b><i>degree_level</i><b> varchar</b>(10)</p>
<p><b>constraint </b><i>degree_level_test</i></p>
<p><b>check </b>(<b>value in </b>('Bachelors', 'Masters', 'Doctorate'));</p>


---

### Index Creation

- Many queries reference only a small proportion of the records in a table.
- It is inefficient for the system to read every record to find  a record with  particular value
- An **index** on an attribute of a relation is a data structure that allows the database system to find those tuples in the relation that have a specified value for that attribute efficiently, without scanning through all the tuples of the relation.
- We create an index with the **create index** command
```
create index <name> on <relation-name> (attribute)
```


---

### Index Creation Example

```
create table student
	(ID			varchar(5), 
	 name			varchar(20) not null, 
	 dept_name		varchar(20), 
	 tot_cred		numeric(3,0) check (tot_cred >= 0),
	 primary key (ID),
	);
```

```
create index student_name_index on student(name);
```

- The [following query can be executed by using the index]({{HTTPS_FQDN}}/sql/interpreter/Chapter.04.index) to find the required record,  without looking at all records of _student_

```
select *
  from student
 where name = 'Shankar'
```

Note:

{{HTTPS_FQDN}}/sql/interpreter/Chapter.04.index

---

{{HIDDEN}}

### Authorization

- We may assign a user several forms of authorizations on parts of the database.
  - **Read** - allows reading, but not modification of data.
  - **Insert** - allows insertion of new data, but not modification of existing data.
  - **Update** - allows modification, but not deletion of data.
  - **Delete** - allows deletion of data.
- Each of these types of authorizations is called a **privilege**.<br/>We may authorize the user all, none, or a combination of these types of privileges on specified parts of a database, such as a relation or a view.


---

{{HIDDEN}}

### Authorization (Cont.)

- Forms of authorization to modify the database schema
  - **Index** - allows creation and deletion of indices.
  - **Resources** - allows creation of new relations.
  - **Alteration** - allows addition or deletion of attributes in a relation.
  - **Drop** - allows deletion of relations.

---

{{HIDDEN}}

### Authorization Specification in SQL

- The **grant** statement is used to confer authorization<br/>**grant** &lt;privilege list&gt; **on** &lt;relation or view&gt; **to** &lt;user list&gt;
- &lt;user list&gt; is:
  - a user-id
  - **public**, which allows all valid users the privilege granted
  - A role (more on this later)
- Example:
```
grant select on department to Amit, Satoshi
```
- Granting a privilege on a view does not imply granting any privileges on the underlying relations.
- The grantor of the privilege must already hold the privilege on the specified item (or be the database administrator).


---

{{HIDDEN}}

### Privileges in SQL

- **select**: allows read access to relation, or the ability to query using the view
  - Example: grant users <i>U</i>1, <i>U</i>2, and <i>U</i>3<b> select</b> authorization on the<i> instructor</i> relation:
<p><b>grant select on </b><i>instructor </i><b>to </b><i>U</i>1<i>, U</i>2<i>, U</i>3</p>
- **insert**: the ability to insert tuples
- **update**: the ability  to update using the SQL update statement
- **delete**: the ability to delete tuples.
- **all privileges**: used as a short form for all the allowable privileges


---

{{HIDDEN}}

### Revoking Authorization in SQL

- The **revoke** statement is used to revoke authorization.<br/>**revoke** &lt;privilege list&gt; **on** &lt;relation or view&gt; **from** &lt;user list&gt;
- Example:
```
revoke select on student from U1, U2, U3
```
- &lt;privilege-list&gt; may be **all** to revoke all privileges the revokee may hold.
- If &lt;revokee-list&gt; includes **public**, all users lose the privilege except those granted it explicitly.
- If the same privilege was granted twice to the same user by different grantees, the user may retain the privilege after the revocation.
- All privileges that depend on the privilege being revoked are also revoked.


Note:

No available in SQLite

### Roles

- Not available in SQLite
- A **role** is a way to distinguish among various users as far as what  these users can access/update in the database.
- To create a role we use:<br/> **create a role** &lt;name&gt;
- Example:
```
create role instructor
```
- Once a role is created we can assign “users” to the role using:<br/>**grant** &lt;role&gt; **to** &lt;users&gt;

---

{{HIDDEN}}


### Roles Example

- <b>create role</b> instructor;
- <b>grant</b><i> instructor</i><b> to </b>Amit<b>;</b>
- Privileges can be granted to roles:
<p>•<b> grant select on</b><i> takes</i><b> to</b><i> instructor</i>;</p>
- Roles can be granted to users, as well as to other roles
<p>•<b> create role</b><i> teaching_assistant</i></p>
<p>•<b> grant</b><i> teaching_assistant</i><b> to</b><i> instructor</i>;</p>
<p><i> Instructor</i> inherits all privileges of <i>teaching_assistant</i></p>
- Chain of roles
<p>•<b> create role</b><i> dean</i>;</p>
<p>•<b> grant</b><i> instructor</i><b> to</b><i> dean</i>;</p>
<p>•<b> grant</b><i> dean</i><b> to</b> Satoshi;</p>

---

{{HIDDEN}}


### Authorization on Views

- <b>create view </b><i>geo_instructor</i><b> as</b>
<p>(<b>select </b>*</p>
<p><b>from </b><i>instructor</i></p>
<p><b>where </b><i>dept_name </i>= 'Geology');</p>
- <b>grant select on </b><i>geo_instructor</i><b> to </b><i>geo_staff</i>
- Suppose that a  <i>geo_staff</i> member issues
<p>•<b> select </b>*</p>
<p><b>from </b><i>geo_instructor</i>;</p>
- What if 
<p>•<i> geo_staff</i> does not have permissions on <i>instructor?</i></p>
  - creator of view did not have some permissions on 
<p><i>instructor?</i></p>

---

{{HIDDEN}}


### Other Authorization Features

- <b>references</b> privilege to create foreign key
<p>•<b> grant reference </b>(<i>dept_name</i>) <b>on </b><i>department </i><b>to </b>Mariano;</p>
  - why is this required?
- transfer of privileges
<p>•<b> grant select on </b><i>department </i><b>to </b>Amit<b> with grant option</b>;</p>
<p>•<b> revoke select on </b><i>department </i><b>from </b>Amit, Satoshi <b>cascade</b>;</p>
<p>•<b> revoke select on </b><i>department </i><b>from </b>Amit, Satoshi <b>restrict</b>;</p>
  - And more!


---

### Epilogue

- Midterm 1
  - Chapters 1, 2, 3, 4 on midterm 1
  - Homework one and two
  - All preclass, postclass, textbook, lecture
  - Everything up to today
- See the [reading list]({{HTTPS_FQDN}}/syllabi/reading) about chapter 5
