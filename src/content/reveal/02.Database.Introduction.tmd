---
title: {{TITLE}}
theme: "lejeune"
separator: "^---"
verticalSeparator: "^----"
notesSeparator: "^Note:"
revealOptions:
    transition: fade

---

### This lecture

- By the end of lecture you should know
  - Difference between a database and a DBMS
  - Why use a DBMS
  - Data models used in DBMS
  - The database language


Note:

### Outline
 - Database-System Applications
 - Purpose of Database Systems
 - View of Data
 - Database Languages
 - Database Design
 - Database Engine
 - Database Architecture
 - Database Users and Administrators
 - History of Database Systems

https://www.db-book.com/slides-dir/PDF-dir/ch1.pdf

---

### Database Management Systems
 - DBMS contains information about a particular enterprise
   - Collection of interrelated data (the database)
   - Set of programs to access the data 
 - DBMS are used to manage data that are:
   - Highly valuable
   - Relatively large
   - Concurrently accessed
   - Multiple users and applications
 - A modern DBMS is a complex software system whose task is to manage a large, complex collection of data.
 - Databases touch all aspects of our lives!!!

Note:

**Section 1.1** Database applications

1. Draw the difference between the database or data and the DBMS or system
2. At high level, why are databases used
  - Value or size of the data
  - Value is not always money: medical trials, corporate secrets
  - Size is not megabytes: coverage
3. DBMS is a large, complex system of software
3. DBMS touch all parts of our life

- Ask students what they did before coming to class..  
 - Databases were used for that

---

### Database Application Examples
- Any large enterprise
 - The U.S. Marine Quartermaster, HR department, etc
 - Manufacturing, airlines, telecommunications
-  Large organizations
   - Universities, government, the military
-  Financial services
   - Banks, credit cards, retailers, advertisers
-  Collections
   - Documents, navigation systems,
-  Database are ubiquitous
   - This class uses a DBMS to allow:
     - You to have worksheets W/O answers
     - Instructor has answers
     - Some worksheets available at certain times

Note:

The take away is that every large group uses a database

 
UNC uses a database

 
Every bank uses a database

 
Drug manufacturers, navigation systems

 
Even this class is a database system

Ask students if they want to see how this class works

---


{{HIDDEN}}

### Database Applications Examples
 - Enterprise Information
   - Sales: customers, products, purchases
   - Accounting: payments, receipts, assets
   - Human Resources: Information about employees, salaries, payroll taxes.
 - Manufacturing: management of production, inventory, orders, supply chain.
 - Banking and finance
   - customer information, accounts, loans, and banking transactions.
   - Credit card transactions
   - Finance:  sales and purchases of financial instruments (e.g., stocks and bonds; storing real-time market data
 - Universities:  registration, grades


---

{{HIDDEN}}

### Database Applications Examples (Cont.)
 - Airlines: reservations, schedules
 - Telecommunication: records of calls, texts, and data usage, generating monthly bills, maintaining balances on prepaid calling cards
 - Web-based services
   - Online retailers: order tracking, customized recommendations
   - Online advertisements
 - Document databases
 - Navigation systems: For maintaining the locations of varies places of interest along with the exact routes of roads, train systems, buses, etc.


---

### Purpose of Database Systems

Database systems offer solutions to all the problems below !!!

- Data redundancy and inconsistency
  - Data is stored in multiple files and formats
  - Duplication of information
  - Data inconsistencies
- Difficulty in accessing data 
  - Data or users on different systems
  - Program written for each request
- Data isolation 
  - Multiple files and formats
- Integrity problems
  - Can a bank balance be less than zero?
  - Where is the overdraft fee code? 
  - How to come up with new overdraft fees?
   - Need to add new constraints or change existing ones.

Note:

**Section 1.2** Purpose of Database Systems

1. What if your name and address appeared in multiple places in different formats?
2. What if everyone had to log onto Amazon to buy something
3. What if some data is in Excel spread sheets, some in Google sheets
4. Keeping things <q>in line</q> with the rules

---

### Purpose of Database Systems (Cont.)

- Atomicity of updates / no inconsistent states
  - Example: Transfer of funds from one account to another should either complete or not happen at all
  - <q>All or nothing</q>
- Concurrent access by multiple users
  - Each user/application runs as if only user/app
  - Concurrency problems
  - Two people read a balance (say 100); Withdraw money (say 50 each) at the same time; Final balance $50 or 0?
- Security problems
  - Hard to provide user access to some, but not all, data
  - Should a professor see students' grades?
  - Should a professor see students' finances?

Note:

Security can be granted at a fine data field level!

---

### University Database Example

- This class use a university database 
- Data consists of information about:
  - Students
  - Instructors
  - Classes
- Application program examples:
  - Add new students, instructors, and courses
  - Register students for courses, and generate class rosters
  - Assign grades to students
    - Compute grade point averages (GPA)
    - Generate transcripts

Note:

For this entire semester we'll use the university databases.

Has instructors, students classes, class rooms, etc

 
Has applications that add students, instructors, etc

---

### Relational Model

- All the data is stored in various tables called relations
- Think of each relation as a single spreadsheet
- Example of tabular data in the relational model
- <figure>
   <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.Figure.1.1.a.TheInstructorTable.png" style="width: 50%">
   <figcaption>Figure 1.1 a The instructor table</figcap>
  </figure>


Note:

In the relational model, the abstract view of the data is a table.

Each row represents and entity

Each column represents a property of the entity

Interesting note from https://news.ycombinator.com/item?id=33649390

Fred Brooks said the most important management decision was sending Ted Codd to graduate school, where Codd laid the foundation for what became relational databases.

---

### A sample relational database

- Relationship between instructors &amp; departments
<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.Figure.1.1.InstructorAndDepartmentTable.png" style="width:40%">
 <figcaption>Figure 1.1 Relationship between instructors &amp; departments</figcaption>
</figure>

Note:

Show how you would find all the professors in each department

https://comp421.cs.unc.edu/sql/interpreter/Chapter.01.Figure.1.1

---

### Database Schema Defining Table

- Specification notation for defining the database schema
```sql 
create table instructor (
  ID char(5),
  name varchar(20)
  dept_name varchar(20),
  salary numeric(8,2))
```
- Database compiler generates tables
- Data dictionary contains metadata (i.e., data about data)
  - Schema is the representative (plan) for the database
  - Integrity constraints
  - Primary key (ID uniquely identifying a row)
  - Authorization
    - Who can access what

Note:

**Section 1.4** Database Languages

Data Definition Language, DDL, defines the tables

DDL information is store in dictionary are used to check
- domain constraints
- referential integrity
- authorization, etc

---

### SQL Query Language

- SQL query language
  - <a href="{{HTTPS_FQDN}}/sql/interpreter/Chapter.01.FindAllInstructorsInCSDepartment" target="_blank">Example</a>: <q>Find all instructors in the computer science department</q>
```sql
SELECT name
  FROM instructor
 WHERE dept_name = 'Comp.Sci.'
```
- SQL always returns a table (relation)
  - <a href="{{HTTPS_FQDN}}/sql/interpreter/Chapter.01.FindAllInstructorsInCSDepartment" target="_blank">Try any U.S. Marine Metallic Sunburst color text</a>
    - They are HTML links to code to try
  - You can modify this code and play with it
  - If you make a mistake, refresh the browser page

Note:


Go out to REDDIT and there will be discussions about whether SQL is Turing complete.

What it means is, can SQL store values and make decisions off those values.
If-then-else statements.

 
Let's look at one example of what you can do with SQL


 


---

### Database Access from Application Program

- SQL does not support actions such as
  - Input from users
  - Output to displays
  - Network communications
- Use high-level language with embedded SQL queries
  - **Application programs** use SQL to interact with the database
  - Let's look at the login program
```sql
SELECT password
  FROM Roll
 WHERE username = 'jmajikes'
```

Note:


 appbase.py

---

### Database Design

- Beyond this high-level discussion
  - Done by a database administrator (DBA)
- Logical Design – How the database looks to users.
  - Requires a <q>good</q> collection of relation schemas.
  - Business decision – which attributes recorded in the database
  - Computer Science decision
    – What relation schemas should we have
    - How should the attributes be distributed among the various relation schemas?
- Physical Design – How to store the data 

Note:

**Section 1.5** Database Design

The logical design looks at what is "good" enough information to model the enterprise.  
 - What attributes of the data should be in the database

The computer science decisions are how to _normalize_ the schema to get good performance.

Design is an iterative process for a database,
the database is always changing.

Want to model the enterprise to have the data mimic the real world  
 - For example, multiple submissions  

Once the logical design is done, physical design completed (file organization Chapter 13)
 
---

### Database Engine / Modules

- Beyond this high-level discussion
- DBMS partitioned into modules
  - Each module has its own responsibilities
- High level: DBMS divided into (at least)
  - The storage manager
  - The query processor component
  - The transaction management component

Note:

**Section 1.6** Database Engine

We'll discuss each section at a high level now

---

### Database Architecture (Types)
#### Just to name a few


- Centralized databases
  - One to a few cores, shared memory
  - Quartermaster &amp; personnel in the same DBMS
- Parallel databases
  - Many core shared memory
  - Shared disk
- Distributed databases
  - Geographical distribution
  - Schema/data heterogeneity
  - Cell phones and towers
- **Appear the same to end user!**

Note:

**SECTION 1.7**

Databases can be set up many different ways.

We'll only be looking a centralized database

See next page

---

{{HIDDEN}} 

### Centralized / Shared-Memory


<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.CentralizedSharedMemory.png" style="width:50%; margin-bottom: auto;">
 <figcaption>Figure 1.3</figcaption>
</figure>


---

{{HIDDEN}} 

### Database Applications

- Two-tier architecture
  - Application resides at the client machine
  - Database on server machine
  - Client / Server model
- Three-tier architecture
  - Client acts as a front end
  - Web-based application
  - Client does not contain any direct database calls.


<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.TwoThreTierArchitectures.png" style="width:50%; margin-bottom: auto;">
 <figcaption>Figure 1.4 Two and three-tier architectures</figcaption>
</figure>

Notes:

Database applications are usually partitioned into two or three parts

A two-tier example is where the database is exposed to a client directly.

A three-tier example is like the class website
 - An added layer with server that interfaces with the serve


---

### Database Administrator

- A person who has central control over the system is called a **database administrator (DBA).**
- Functions of a DBA include:
  - Schema definition
  - Storage structure and access-method definition
  - Schema and physical-organization modification
  - Granting of authorization for data access
  - Routine maintenance
  - Periodically backing up the database
  - Ensuring that enough free disk space is available for normal operations, and upgrading disk space as required
  - Monitoring jobs running on the database 
- Lots of money.  Lots of pressure.

Note:

A DBA is responsible for all parts of the database.
In this class we'll be sophisticated users but not full DBA

 
If you're a DBA you'll make lots of money but responsible for all these things

---

{{HIDDEN}}

### History of Database Systems

- 1950s and early 1960s:
  - Data processing using magnetic tapes for storage
  - Tapes provided only sequential access
  - Punched cards for input
- Late 1960s and 1970s:
  - Hard disks allowed direct access to data
  - Network and hierarchical data models in widespread use
  - Ted Codd defines the relational data model
  - Would win the ACM Turing Award for this work
  - IBM Research begins System R prototype
  - UC Berkeley (Michael Stonebraker) begins Ingres prototype
  - Oracle releases first commercial relational database
  - High-performance (for the era) transaction processing

Note:

These next three slides give a quick time line for databases

---

{{HIDDEN}}

### History of Database Systems (Cont.)

- 1980s:
  - Research relational prototypes evolve into commercial systems
  - SQL becomes industrial standard
  - Parallel and distributed database systems
  - Wisconsin, IBM, Teradata
  - Object-oriented database systems
- 1990s:
  - Large decision support and data-mining applications
  - Large multi-terabyte data warehouses
  - Emergence of Web commerce


---

{{HIDDEN}}

### History of Database Systems (Cont.)

- 2000s
  - Big data storage systems
  - Google BigTable, Yahoo PNuts, Amazon, 
  - “NoSQL” systems.
  - Big data analysis: beyond SQL
  - Map reduce and friends
- 2010s
  - SQL reloaded
  - SQL front end to Map Reduce systems
  - Massively parallel database systems
  - Multi-core main-memory databases

---

### Epilogue

- You should know:
  - What a databases is and why it's used
  - This class at high level
    - Don't build databases
    - Can play with code 
    - No software stored on your computer
  - What is a relational data model
  - There are many architectures (types) of databases
