---
title: {{TITLE}}
theme: "lejeune"
separator: "^---"
verticalSeparator: "<!--v-->"
notesSeparator: "^Note:"
revealOptions:
    transition: fade

---

### This lecture

- By the end of lecture you should know
  - Difference between a database and a DBMS
  - Why use a DBMS
  - Data models used in DBMS
  - The database language


Note:

### Outline
 - Database-System Applications
 - Purpose of Database Systems
 - View of Data
 - Database Languages
 - Database Design
 - Database Engine
 - Database Architecture
 - Database Users and Administrators
 - History of Database Systems

https://www.db-book.com/slides-dir/PDF-dir/ch1.pdf

---

### Database Management Systems
 - DBMS contains information about a particular enterprise
   - Collection of interrelated data (the database)
   - Set of programs to access the data 
 - DBMS are used to manage data that are:
   - Highly valuable
   - Relatively large
   - Concurrently accessed
   - Multiple users and applications
 - A modern DBMS is a complex software system whose task is to manage a large, complex collection of data.
 - Databases touch all aspects of our lives!!!

Note:

1. Draw the difference between the database or data and the DBMS or system
2. At high level, why are databases used
  - Value or size of the data
  - Value is not always money: medical trials, corporate secrets
  - Size is not megabytes: coverage
3. DBMS is a large, complex system of software
3. DBMS touch all parts of our life

- Ask students what they did before coming to class.. 
 - Databases were used for that

---

### Database Application Examples
- Any large enterprise
 - The U.S. Marine Quartermaster, HR department, etc
 - Manufacturing, airlines, telecommunications
-  Large organizations
   - Universities, government, the military
-  Financial services
   - Banks, credit cards, retailers, advertisers
-  Collections
   - Documents, navigation systems,
-  Database are ubiquitous
   - This class uses a DBMS to allow:
     - You to have worksheets W/O answers
     - But instructor has answers
     - If graded, the database keeps track of grades

Note:

The take away is that every large group uses a database

 
The U.S. Marine Corp uses databases

 
Every bank uses a database

 
Drug manufacturers, navigation systems

 
Even this class is a database system

<b>Ask students if they want to see how this class works</b>

---


{{HIDDEN}}

### Database Applications Examples
 - Enterprise Information
   - Sales: customers, products, purchases
   - Accounting: payments, receipts, assets
   - Human Resources: Information about employees, salaries, payroll taxes.
 - Manufacturing: management of production, inventory, orders, supply chain.
 - Banking and finance
   - customer information, accounts, loans, and banking transactions.
   - Credit card transactions
   - Finance:  sales and purchases of financial instruments (e.g., stocks and bonds; storing real-time market data
 - Universities:  registration, grades


---

{{HIDDEN}}

### Database Applications Examples (Cont.)
 - Airlines: reservations, schedules
 - Telecommunication: records of calls, texts, and data usage, generating monthly bills, maintaining balances on prepaid calling cards
 - Web-based services
   - Online retailers: order tracking, customized recommendations
   - Online advertisements
 - Document databases
 - Navigation systems: For maintaining the locations of varies places of interest along with the exact routes of roads, train systems, buses, etc.


---

### Purpose of Database Systems

Database systems offer solutions to all the problems below !!!

- Data redundancy and inconsistency
  - Data is stored in multiple files and formats
  - Duplication of information
  - Data inconsistencies
- Difficulty in accessing data 
  - Data or users on different systems
  - Program written for each request
- Data isolation 
  - Multiple files and formats
- Integrity problems
  - Can a bank balance be less than zero?
  - Where is the overdraft fee code? 
  - How to come up with new overdraft fees?
   - Need to add new constraints or change existing ones.

Note:

**Section 1.2** Purpose of Database Systems

1. What if your name and address appeared in multiple places in different formats?
2. What if everyone had to log onto Amazon to buy something
3. What if some data is in Excel spread sheets, some in Google sheets
4. Keeping things <q>in line</q> with the rules

---

### Purpose of Database Systems (Cont.)

- Atomicity of updates / no inconsistent states
  - Example: Transfer of funds from one account to another should either complete or not happen at all
  - <q>All or nothing</q>
- Concurrent access by multiple users
  - Each user/application runs as if only user/app
  - Concurrency problems
  - Two people read a balance (say 100); Withdraw money (say 50 each) at the same time; Final balance $50 or 0?
- Security problems
  - Hard to provide user access to some, but not all, data
  - Should a marine see their own health records?
  - Should a [sailor see the President's health records](https://abcnews.go.com/US/sailor-attempted-access-president-bidens-restricted-medical-record/story?id=111780284#:~:text=The%20sailor%20was%20administratively%20punished%20following%20an%20investigation.&text=A%20junior%20sailor%20has%20been,the%20U.S.%20Navy%20revealed%20Tuesday.)?

Note:

Security can be granted at a fine data field level!

---

### University Database Example

- This class use a university database 
- Data consists of information about:
  - Students
  - Instructors
  - Classes
- Application program examples:
  - Add new students, instructors, and courses
  - Register students for courses, and generate class rosters
  - Assign grades to students
    - Compute grade point averages (GPA)
    - Generate transcripts
- We'll only use a small part of this database

Note:

For this entire semester we'll use the university databases.

Has instructors, students classes, class rooms, etc

 
Has applications that add students, instructors, etc

---

### Relational Model

- All the data is stored in various tables called relations
- Think of each relation as a single spreadsheet
- Example of tabular data in the relational model
- <figure>
   <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.Figure.1.1.a.TheInstructorTable.png" style="width: 50%">
   <figcaption>Figure 1.1 a The instructor table</figcap>
  </figure>


Note:

In the relational model, the abstract view of the data is a table.

Each row represents and entity

Each column represents a property of the entity

Might want to explain why the ID is in each table?

---

### A sample relational database

- Relationship between instructors &amp; departments
<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.Figure.1.1.InstructorAndDepartmentTable.png" style="width:35%">
</figure>
- <a href="https://lejeune.majikes.net/sql/interpreter/Chapter.01.Figure.1.1" target="+blank">Try any text this color</a> they're HTML links

Note:

Show them the webpage that describes the two tables.

Note how you create the tables and query them.

You can try things, if they break, just refresh the screen.

The next slide is going to show how to create tables

---

### Database Schema Defining Table

- Specification notation for defining the database schema
```sql 
create table instructor (
  ID char(5),
  name varchar(20)
  dept_name varchar(20),
  salary numeric(8,2))
```
- Database compiler generates tables
- Data dictionary contains metadata (i.e., data about data)
  - Schema is the representative (plan) for the database
  - Integrity constraints
  - Primary key (ID uniquely identifying a row)
  - Authorization
    - Who can access what
  - IMHO This is where the good stuff gets done
    - Want to know who has accessed data?
    - Want to know who hasn't accessed data?

Note:

This create table is done from the last slide.

But we could show them <b>db.py</b> and show them the roll table or the fetch table.

select onyen from fetched where url like '%sql%Chapter.01.Figure.1.1%';

select onyen from roll except select onyen from fetched where url like '%sql%Chapter.01.Figure.1.1%';

---

### SQL Query Language

- SQL query language
  - <a href="{{HTTPS_FQDN}}/sql/interpreter/Chapter.01.FindAllInstructorsInCSDepartment" target="_blank">Example</a>: <q>Find all instructors in the computer science department</q>
```sql
SELECT name
  FROM instructor
 WHERE dept_name = 'Comp.Sci.'
```
- SQL always returns a table (relation)
  - It <i>may</i> have duplicates
  - You can modify this code and play with it
  - If you make a mistake, refresh the browser page

Note:

select onyen from fetched where url like '%sql%Chapter.01.FindAllInstructors%' order by onyen

 


---

### Database Access from Application Program

- SQL does not support actions such as
  - Input from users
  - Output to displays
  - Network communications
- Use high-level language with embedded SQL queries
  - **Application programs** use SQL to interact with the database
  - Let's look at the login program which uses Python
```sql
SELECT password
  FROM Roll
 WHERE username = 'jmajikes'
```

Note:


 appbase.py

---

### Database Design

- Lots done beyond this high-level discussion
  - Done by a database administrator (DBA)
- Logical Design – How the database looks to users.
  - Requires a <q>good</q> collection of relation schemas.
  - Business decision – which attributes recorded in the database
    - How the data will be used
  - Computer Science decision
     - How to arrange data for performance
     - Add indexes for fast searches
- Physical Design – How to store the data 

Note:

There is a lot done beyond this discussion to set up a database.
DBA make lots of money to do it.

You need a good collection of tables.
  - Marines: what attributes would you have in a table?
  - What about civvies?
  - Equipment issued?
---

### Database Engine / Modules

- Beyond this high-level discussion
- DBMS partitioned into modules
  - Each module has its own responsibilities
- High level: DBMS divided into (at least)
  - The storage manager
  - The query processor component
  - The transaction management component
  - We can go into more detail if you'd like

Note:

**Section 1.6** Database Engine

We'll discuss each section at a high level now

<!--v-->

### Storage Manager Implementation

- Data structures as part of physical system
  - Data files -- store the database itself
  - Data dictionary -- stores metadata
    - In particular the database schema
  - Indices
    - Provides fast access to data items
    - Index maintains pointers to data items
    - Storage manage maintains the pointers

Note:

In chapter 12, 13 and 14 we'll cover these parts of the storage manager

SM maintains data files (4K or 8K?) 
- The meta data  
- Indices  

<!--v-->

### Query Processor

- The query processor components include:
  - Compiles or interprets statements
    - Records the definitions in the data dictionary.
    - Provides an evaluation plan to process query
    - Performs query optimization
      - Picks the lowest cost plan
    - Plan give to evaluation engine
  - Query evaluation engine
    - Executes low-level query plan

Note:

Query processor module processes queries, duh!  
- Processes both DML and DDL

The DDL output gets stored in the data dictionary

The DML compiles the query:  
- Looks at several plans
- Sends low cost plan to engine

Query evaluation executes the plan

**NEXT**  
Let's look at a visual of the query processor


<!--v-->

{{HIDDEN}}

### Query Processing
 1. Parsing and translation
 2. Optimization
 3. Evaluation

<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.QueryProcessing.png" style="width:50%; margin-bottom: auto;">
 <figcaption>Part of Figure 1.3</figcaption>
</figure>

Note:

This is part of Figure 1.3 which is too hard to examine at one sitting

In this class we will spend a large part of the semester on query evaluation!


<!--v-->

### Transaction Management

- A **transaction** is a collection of operations 
    - Performs a single, logical function
- **Transaction-management component** ensures
    - The database remains in a consistent (correct) state
    - Recovers from:
      - System failures like power failures &amp; OS crashes
      - Transaction (application coding) failures.
- **Concurrency-control manager** controls interaction among concurrent transactions
    - Ensures the consistency of the database.
- Get money from ATM; deducts from your checking; power outage; you didn't receive the money
  - TM ensures all or nothing gets committed to the database

Note:

Third manager of the DBMS

Transaction manager covered in chapter 17.  May not get to.

A transaction is a group of operations that go together

Transaction manager makes sure the group completes or backs out incomplete group

Concurrency manager makes users think they have their own machine

---

### Database Architecture (Types)
#### Just to name a few


- Centralized databases
  - One to a few databases in shared memory
  - Quartermaster &amp; personnel in the same DBMS
- Parallel databases
  - Multiple DBMS in shared memory
  - Shared disk
- Distributed databases
  - Geographical distribution
  - Schema/data heterogeneity
  - Cell phones and towers
- For example:
  - Amazon - multiple db copies
  - T-mobile - small parts of db in each cell tower
  - Government - interoperable dbs updating each other
- **Appear the same to end user!**

Note:

**SECTION 1.7**

Databases can be set up many different ways.

We'll only be looking a centralized database

See next page

---

{{HIDDEN}} 

### Centralized / Shared-Memory


<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.CentralizedSharedMemory.png" style="width:50%; margin-bottom: auto;">
 <figcaption>Figure 1.3</figcaption>
</figure>


---

{{HIDDEN}} 

### Database Applications

- Two-tier architecture
  - Application resides at the client machine
  - Database on server machine
  - Client / Server model
- Three-tier architecture
  - Client acts as a front end
  - Web-based application
  - Client does not contain any direct database calls.


<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.01.TwoThreTierArchitectures.png" style="width:50%; margin-bottom: auto;">
 <figcaption>Figure 1.4 Two and three-tier architectures</figcaption>
</figure>

Notes:

Database applications are usually partitioned into two or three parts

A two-tier example is where the database is exposed to a client directly.

A three-tier example is like the class website
 - An added layer with server that interfaces with the serve


---

### Database Administrator

- A person who has central control over the system is called a **database administrator (DBA).**
- Functions of a DBA include:
  - Schema definition
  - Storage structure and access-method definition
  - Schema and physical-organization modification
  - Granting of authorization for data access
  - Routine maintenance
  - Periodically backing up the database
  - Ensuring that enough free disk space is available for normal operations, and upgrading disk space as required
  - Monitoring jobs running on the database 
- Lots of money.  Lots of pressure.
- Do you want to know the history of databases?

Note:

These next three slides give a quick time line for databases

<!--v-->

### History of Database Systems

- Late 1960s and 1970s:
  - Hard disks allowed direct access to data
  - Network &amp; hierarchical data model databases
  - Ted Codd defines the relational data model
    - Would win the ACM Turing Award for this work
  - Oracle releases first commercial relational database
  - High-performance transaction processing


Note:

<!--v-->

### History of Database Systems (Cont.)

- 1980s:
  - Commercial (not high performance) systems
  - SQL becomes industrial standard
  - Parallel and distributed database systems
- 1990s:
  - Large decision support and data-mining applications
  - Large multi-terabyte data warehouses
  - Emergence of Web commerce
    - This website uses databases


<!--v-->

### History of Database Systems (Cont.)

- 2000s
  - Big data storage (GPS Navigation)
    - [Modeling of cities](https://warontherocks.com/2016/01/bringing-big-data-to-operations-in-mega-cities/)
  - Google BigTable, Amazon 
    - [Intelligent surveillance and reconnaissance](https://www.militaryaerospace.com/trusted-computing/article/16720022/army-to-brief-industry-jan-18-about-cloud-computing-needs-for-information-warfare)
  - “NoSQL” systems
    - [DoD and VHA health records](https://www.militaryaerospace.com/trusted-computing/article/16720022/army-to-brief-industry-jan-18-about-cloud-computing-needs-for-information-warfare)
- 2010s
  - SQL front end to Map Reduce systems
    - Used to analyze social media
    - [Real time cyber defense](https://www.militaryaerospace.com/trusted-computing/article/16720022/army-to-brief-industry-jan-18-about-cloud-computing-needs-for-information-warfare)
  - Massively parallel database systems
    - [Aircraft and spacecraft aerodynamic analysis](https://apps.dtic.mil/sti/citations/ADA218282)

---

### Epilogue

- You should know:
  - What a databases and DBMS is and why it's used
  - We'll just cover high level user access to DB
    - This is just a survey
  - There are lots of databases out there
  - They're the foundation of a lot of work
    - We're still using SQL that was developed in 1970s!
