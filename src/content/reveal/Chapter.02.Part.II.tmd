---
title: {{TITLE}}
theme: "comp421"
separator: "^---"
verticalSeparator: "^----"
notesSeparator: "^Note:"
revealOptions:
    transition: fade


---

### Today's class

#### Chapter 2: Intro to Relational Model

- Last class's worksheet
  - Know when to use DISTINCT
- Good Piazza posts
- By the end of class you should know
  - The Relational Algebra  


Note:

Make a note about last class's worksheet.  Must use DISTINCT

You should know when to and when not to use DISTICT

https://www.db-book.com/slides-dir/PDF-dir/ch2.pdf

---

### Composition of Relational Operations

- Relational-algebra operation result is a relation
  - Relational-algebra operations can be composed together into a **relational-algebra expression**.
- Find the names of all instructors in the Physics department.
  - $\Pi_{\mbox{name}} (\sigma_{\mbox{dept_name}='Physics'} (instructor))$  
  - Projection takes the result of another operation
  - [SELECT name FROM (SELECT * FROM Instructor WHERE dept_name = 'Physics')]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.SelectPhysicInstructorsII)

Note:

Remember, each operation returns a relation!  
This allows us to build some big relations

Let's look at just getting the names of the physics instructors


---

### Cartesian-Product Operation

- Cartesian-product operation (denoted by $\times$) combines any two relations
  - Cartesian product instructor and teaches
  - $ \mbox{instructor} \times \mbox{teaches}$   
  - A combined tuple of each possible pair
  - Each tuple from instructor paired with each tuple of teaches
- Since the instructor _ID_ appears in both relations
  - Figure distinguishes these by attaching the relation name
    - instructor.ID  
    - teaches.ID
  - SQLite does not do this!
  - See next slide

Note:

The Cartesian Product combines all pairs.  
Rarely is this the desired result  

ID appears twice  
Each instructor appears with each course even if they never taught it.

We'll see better how this works in the next slide 

---

### The instructor **X** teaches table

- [Cartesian product instructor $\times$ teaches]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.InstructorTimesTeaches)
<figure style="border: 0">
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.02.Figure.2.12.Cartesian.Product.png" style="width:50%"/>
 <figcaption>Figure 2.12</figcaption> 
</figure>

Note:

Look at the SQL command output to see how big this is

{{HTTPS_FQDN}}/sql/interpreter/Chapter.02.InstructorTimesTeaches

---

### Join Operation

- The Cartesian-Product associates every tuple of both relations
  - Most resulting rows $\rightarrow$ have instructors who did **NOT** teach a particular course. 
  - Use join to only get instructors and the courses that they taught
  - $\sigma_{_{\mbox{instructor.id =  teaches.id}}}  (instructor \times teaches )$  
  - [SELECT DISTINCT * FROM Instructor Join Teaches ON Instructor.ID = Teaches.ID]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.Figure.2.13.Join.Instructor.Teaches)
   - We get only those tuples of $\mbox{instructor} \times \mbox{teaches}$ that pertain to instructors and the courses that they taught.
 - The result of this expression, shown in the next slide  

Note:

{{HTTPS_FQDN}}/sql/interpreter/Chapter.02.Figure.2.13.Join.Instructor.Teaches

---

### Join Operation (Cont.)

- $\sigma_{_\mbox{instructor.id =  teaches.id}} (instructor  \times teaches)$  
  - SELECT *<br/> FROM Instructor, Teaches<br/> WHERE Instructor.ID = Teaches.ID<figure style="border: 0">
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.02.Figure.2.13.Join.Instructor.Teachers.png" style="width:50%"/>
 <figcaption>Figure 2.13</figcaption> 
</figure>


---

### Join Operation (Cont.)

- Join operation combines a select &amp; Cartesian-Product operation
  - Consider relations $r(R)$ and $s(S)$
  - Let "theta" $\theta$ be a predicate
  - Apply $\theta$ to $R \times S$.
  - The join operation $r \bowtie s$ = $\sigma_{_\theta} (r \times s)$
- $\sigma_{_{instructor.id =  teaches.id}} (instructor \times teaches)$ equates
  - $instructor \bowtie_\mbox{(instructor.id = teaches.id)} teaches$

Note:

Bow tie with a predicate is another way to write join

{{HTTPS_FQDN}}/worksheets/worksheet-02-cart-join

---

### Natural Join Operation

- Join operation specified w/out $\theta \rightarrow$ Natural Join
  - Implicitly creates $\theta$ of same-name attributes
- $\sigma_{_{instructor.id =  teaches.id}} (instructor \times teaches)$ equates $instructor \bowtie teaches$
  - But this assumes the current schema!
  - What if two years after you write the code, the schema changes?
  - Natural Join is dangerous
  - I caution you **NOT** to use it in COMP 421

---

### Union Operation

- The union operation $r \cup s$ allows us to combine two relations
- For $r \cup s$ to b valid.
     1. $r$, $s$ must have the same **arity** (number of attributes)
     2. Attribute domains must be **compatible** <br/>
       - Attributes convertible to same type
- Find all courses taught in the Fall 2017 and/or Spring 2018
     - $\Pi_\mbox{course_id} (\sigma_{semester='Fall' \land year=2017} (section))$ $\cup$ $\Pi_\mbox{course_id} (\sigma_{semester='Spring' \land year=2018} (section))$ 
     - [SELECT course_id FROM Section where semester='Fall' and year=2017 <br/>
       UNION<br/>
       SELECT course_id FROM Section where semester='Spring' and year=2018]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.Figure.2.14.Union.Fall.2017.Spring.2018)

Note:

See the next slide for the output or click on the link

**HOW ELSE COULD THIS BE DONE?**

---

### Union Operation (Cont.)
- Result of: $\Pi_\mbox{course_id} (\sigma_{semester='Fall' \land year=2017} (section))$ $\cup$ $\Pi_\mbox{course_id} (\sigma_{semester='Spring' \land year=2018} (section))$ 

<figure style="border: 0">
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.02.Figure.2.14.Union.Fall.2017.Spring.2018.png" style="width:20%"/>
 <figcaption>Figure 2.14</figcaption> 
</figure>



---

### Set-Intersection Operation

- Set-intersection operation finds tuples in both relations
  - $r \cap s$ assumes $r$ &amp; $s$ same arity and compatible attributes
- Find all courses taught in both Fall 2017 &amp; Spring 2018<br /> $\Pi_\mbox{course_id} (\sigma_{semester='Fall' \land year=2017} (section))$ $\cap$    $\Pi_\mbox{course_id} (\sigma_{semester='Spring' \land year=2018} (section))$
     - [SELECT course_id FROM Section where semester='Fall' and year=2017 <br/>
       INTERSECT<br/>
       SELECT course_id FROM Section where semester='Spring' and year=2018]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.Figure.2.15.Intersection.Fall.2017.Spring.2018)
   - Result
<figure style="border: 0">
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.02.Figure.2.15.Intersection.Fall.2017.Spring.2018.png" style="width:25%"/>
 <figcaption>Figure 2.15</figcaption> 
</figure>

Note:

AGAIN how else could you write this?

---

### Set Difference Operation

- Set-difference finds tuples in one but not another relation
  - $r â€“ s$. **compatible** relations (same arity and compatible).
- Find all courses taught Fall 2017 but not Spring 2018
  - [SELECT course_id FROM Section WHERE semester='Fall' AND year=2017<br/> 
  EXCEPT<br/>
    SELECT course_id FROM Section WHERE semester='Spring' AND year=2018]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.Figure.2.16.Fall.2017.Except.Spring.2018)
<figure style="border: 0">
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.02.Figure.2.16.Fall.2017.Except.Spring.2018.png" style="width:20%"/>
 <figcaption>Figure 2.16</figcaption> 
</figure>

Note:

Page 53 2.6.6

{{HTTPS_FQDN}}/static/images/Chapter.02.Figure.2.16.Fall.2017.Except.Spring.2018.png

---

### The Assignment  Operation 

- Convenient to assign temporary relations to variables
  - Use the assignment operator $\leftarrow$
  - Similar to assignment in programming language
  - Queries can be written as sequential program
    - Consisting of series of assignments 
    - End with an expression whose value is returned
    - Queries can be quite long, but much more readable
- Find all the instructors in the Physics and Music departments
  - Physics $\leftarrow$ $\sigma_{\mbox{dept_name}='Physics'} (instructor)$
  - Music $\leftarrow$ $\sigma_{\mbox{dept_name}='Music'} (instructor)$
  - $\Pi_{\mbox{name}}$ (Physics) $\cup$ $\Pi_{\mbox{name}}$ (Music)
  - [SELECT name FROM Physics UNION SELECT name FROM Music]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.Assignment.Physics.Music)

Note:

First part: Talk about assignment operator
 - Useful for shorthand renaming
 - Useful for renaming Courses to C
 
Rename temporary relations!
```sql
WITH Physics AS (SELECT *
                   FROM Instructor
									WHERE dept_name = 'Physics'),
     Music AS (SELECT *
                   FROM Instructor
									WHERE dept_name = 'Music')
SELECT name
  FROM Physics

UNION

SELECT name
  FROM Music;
```
Very helpful

Page 55 2.6.7



---

### The Rename Operation 

- The relational-algebra results can be renamed
  - Helps with readability
  - The rename operator, $\rho$, is provided for that purpose
- $\rho_x (E)$ returns expression $E$ with name $x$
  - Also written as $\rho_{x(A_1,A_2, \dots, A_n)} (E)$

Note:

The last demo showed a useful rename

Page 56 2.6.8

---

### Equivalent Queries

- More than one way to write a query in relational algebra.
- Example: Find information about courses taught by instructors in the Physics department with salary greater than 90,000
   1. $\sigma_{\mbox{dept_name} = 'Physics' \land salary \gt 90,000} (instructor)$
   2. $\sigma_{\mbox{dept_name} = 'Physics'}$ $(\sigma_{salary \gt 90.000} (instructor))$ 
   - The two queries are not identical
   - They **produce** the same result on any database.
- Be careful!
   - Exams questions only examine result
      - Either is fine
      - Performance only affects your machine
   - Exam questions can use multiple choice pull downs to determine if you know equivalent queries
   - Must know how to do things multiple ways


---

### Chapter 2 Epilogue

- What we learned:
  - What a relation is and the words to describe it
  - Schema diagrams, DDL, and DML high level
  - Data definition language description of the schema
    - keys, candidate keys, and superkeys
  - Six relational algebra operators
    - Combining operators into expressions
- Worksheet-chapter-02-postclass due before next class
