---
title: {{TITLE}}
theme: "comp421"
separator: "^---"
verticalSeparator: "^----"
notesSeparator: "^Note:"
revealOptions:
    transition: fade


---

### Chapter 14-2:  Indexing Part II

- Should know basic concepts of $B^+$-trees
  - $B^+$-Tree Extensions
  - Hash Indices
  - Multiple-Key Access
  - Creation of Indices
  - Write-Optimized Indices
  - Spatial and Temporal Data

Note:

https://www.db-book.com/slides-dir/PDF-dir/ch14.pdf

---

### Updates on B$^+$-Trees
#### Insertion

- Assume record already added to the file.  Let:
  - $pr$ be pointer to the record, and let 
  - $v$ be the search key value of the record
1. Find the leaf node in which the search-key value would appear
   1. If there is room in the leaf node, insert (v, $pr$) pair in the leaf node
   2. Otherwise, split the node (along with the new ($v, pr$)  entry) as discussed in the next slide, and propagate updates to parent nodes.


---

### Updates on B$^+$-Trees: Insertion (Cont.)

- Splitting a leaf node:
    - take the <i>n </i>(search-key value, pointer) pairs (including the one being inserted) in sorted order.  Place the first <i>n</i>/2 in the original node, and the rest in a new node.
    - let the new node be <i>p,</i> and let <i>k</i> be the least key value in <i>p.  </i>Insert (<i>k,p</i>) in the parent of the node being split. 
    - If the parent is full, split it and <b>propagate</b> the split further up.
- Splitting of nodes proceeds upwards till a node that is not full is found. 
    - In the worst case the root node may be split increasing the height of the tree by 1. <br/><figure><img src="{{HTTPS_FQDN}}/static/images/Chapter.14.Figure.14.13.Splitting.A.Leaf.Node.png" style="width:35%"/>
 <figcaption>Figure 14.13 Split of leaf node on insertion of "Adams"</figcaption> 
</figure>
- Result of splitting node containing Brandt, Califieri and Crick on inserting Adams **Next step:** insert entry with (Califieri, pointer-to-new-node) into parent


---

### B$^+$-Tree Insertion

<figure><img src="{{HTTPS_FQDN}}/static/images/Chapter.14.Figure.14.14.Insertion.Of.Adams.IntoB+-tree.png" style="width:100%"/>
 <figcaption>Figure 14.14 Insertion of "Adams" into the B+-tree"</figcaption> 
</figure>

---

### B$^+$-Tree Insertion


<figure><img src="{{HTTPS_FQDN}}/static/images/Chapter.14.Figure.14.15.Insertion.Of.Lamport.Into.B+-tree.png" style="width:100%"/>
 <figcaption>Figure 14.15 Insertion of "Lamport" into the B+-tree"</figcaption> 
</figure>

---

### Insertion in B$^+$-Trees (Cont.)

- Splitting a non-leaf node: when inserting (k,p) into an already full internal node N
    - Node N to in-memory area M
      - Space for $n+1$ pointers and $n$ keys
    - Insert (k,p) into M 
    - Copy $P_1$,$K_1$, $\dots$, $K_{\lceil n/2 \rceil}$, $P_{\lceil n/2 \rceil}$ from M back into node N
    - Copy $P_{\lceil n/2 \rceil +1},K_{\lceil n/2 \rceil+1}$, $\dots$, $K_n,P_{n+1}$ from M into newly allocated node $N^\prime$
    - Insert ($K_{\lceil n/2 \rceil}, N^\prime$ ) into parent N
- Example inserting Califieri into Adams, Brandt, Crick<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.14.B+-tree.pseudocode.nodes.png" style="width:75%"/>
 <figcaption>Example of splitting non-leaf node</figcaption>
</figure>
- <b>Read pseudocode p 643 Figure 14.16</b>


---

### Examples of B$^+$-tree Deletion

- Deleting “Srinivasan” causes <b>merging</b> of under-full leaves

<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.14.Figure.14.18.Deletion.of.Srinivasan.from.the.b-tree.png" style="width:75%"/>
 <figcaption>Figure 14.18 Deletion of "Srinivasan"</figcaption>
</figure>



---

### Examples of B$^+$-tree Deletion

- Deleting "Singh" and "Wu"
<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.14.Figure.14.19.Deletion.of.Singh.and.Wu.from.the.B+tree.png" style="width:75%"/>
 <figcaption>Figure 14.19 Deletion of "Singh" and "Wu"</figcaption>
</figure>

- Leaf containing Singh and Wu became underfull, and **borrowed a value** Kim from its left sibling
- Search-key value in the parent changes as a result


---

### Example of B$^+$-tree Deletion (Cont.)

- Deletion of "Gold" <figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.14.Figure.14.20.Deletion.of.Gold.from.the.B+tree.png" style="width:50%"/>
 <figcaption>Figure 14.20 Before and after deletion of "Gold"</figcaption>
</figure>
- Node Gold, Katz underfull $\rightarrow$  merged with sibling 
- Parent underfull $\rightarrow$ merged with sibling
    - Value separating two nodes in parent pulled down when merging
- Root node then has only one child, and is deleted
- Gold is in index but not in leaves


---

### Updates on B$^+$-trees Deletion

- Assume record already deleted from file.  Let <i>V </i>be the search key value of the record, and $Pr$ be the pointer to the record.
  - Remove ($Pr, V$) from the leaf node 
  - If the node has too few entries due to the removal, and the entries in the node and a sibling fit into a single node, then <b><i>merge siblings</i></b>:
    - Insert all the search-key values in the two nodes into a single node (the one on the left), and delete the other node.
    - Delete the pair ($K_{i-1}, P_i$), where $P_i$ is the pointer to the deleted node, from its parent, recursively using the above procedure.


---

### Updates on B$^+$-trees Deletion

- Otherwise, if the node has too few entries due to the removal, but the entries in the node and a sibling do not fit into a single node, then **redistribute pointers**:
  - Redistribute the pointers between the node and a sibling such that both have more than the minimum number of entries.
  - Update the corresponding search-key value in the parent of the node.
- The node deletions may cascade upwards till a node which has $\lceil n/2 \rceil$ or more pointers is found.
- If the root node has only one pointer after deletion, it is deleted and the sole child becomes the root.


---


### Complexity of Updates

- Cost (in terms of number of I/O operations) of insertion and deletion of a single entry proportional to height of the tree<ul><li>With K entries and maximum fanout of n, worst case complexity of insert/delete of an entry is </li></ul> $\mathcal{O}(\log_{\lceil n/2 \rceil} (K)$)
- In practice, number of I/O operations is less:<ul>
 <li>Internal nodes tend to be in buffer</li>
 <li>Splits/merges are rare, most insert/delete operations only affect a leaf node</li></ul>
- Average node occupancy depends on insertion order<ul>
 <li>Two-thirds with random order, one-half with insertion in sorted order</li></ul>


---

{{HIDDEN}}

### Non-Unique Search Keys

- Alternatives to scheme described earlier
  - Buckets on separate block (bad idea)
  - List of tuple pointers with each key
    -  Extra code to handle long lists
    -  Deletion of a tuple can be expensive if there are many 
<p>duplicates on search key (why?)</p>
  - Worst case complexity may be linear!
    -  Low space overhead, no extra cost for queries
  - Make search key unique by adding a record-identifier
    -  Extra storage overhead for keys
    -  Simpler code for insertion/deletion
    -  Widely used


---

### B$^+$-tree File Organization

- B$^+$-Tree File Organization:
  - leaf nodes in a B$^+$-tree file organization store records, instead of pointers
  - Helps keep data records clustered even when there are insertions/deletions/updates
- Leaf nodes are still required to be half full
  - Since records are larger than pointers, the maximum number of records that can be stored in a leaf node is less than the number of pointers in a non-leaf node.
- Insertion and deletion are handled in the same way as insertion and deletion of entries in a B$^+$-tree index.


---

{{HIDDEN}}

### B$^+$-Tree File Organization (Cont.)

- Good space utilization important since records use more space than pointers.
- To improve space utilization, involve more sibling nodes in redistribution during splits and merges
    - Involving 2 siblings in redistribution (to avoid split / merge where possible) results in each node having at least entries
<p>Example of B$^+$-tree File Organization</p>
<p></p>
<p></p>
<p>3</p>
<p>/</p>
<p>2<i>n</i></p>


---

### Other Issues in Indexing

- **Record relocation and secondary indices**
  - If a record moves, all secondary indices that store record pointers have to be updated
  - Node splits in B$^+$-tree file organizations become very expensive
    -  **Solution**: use search key of B$^+$-tree file organization instead of record pointer in secondary index
       - Add record-id if B$^+$-tree file organization search key is non-unique
       - Extra traversal of file organization to locate record
         - Higher cost for queries, but node splits are cheap


---

### Indexing Strings

- Variable length strings as keys
  - Variable fanout
  - Use space utilization as criterion for splitting, not number of pointers
- **Prefix compression**
  - Key values at internal nodes can be prefixes of full key
    -  Keep enough characters to distinguish entries in the subtrees separated by the key value
  - E.g. “Silas” and “Silberschatz” can be separated by “Silb”
  - Keys in leaf node can be compressed by sharing common prefixes


---

### Bulk Loading and Bottom-Up Build

- Inserting entries one-at-a-time into a B$^+$-tree requires $\ge 1$ IO per entry 
    - assuming leaf level does not fit in memory
    - can be very inefficient for loading a large number of entries at a time (**bulk loading**)
- Efficient alternative 1:
    - sort entries first (using efficient external-memory sort algorithms discussed later in Section 12.4)
    - insert in sorted order
    -  insertion will go to existing page (or cause a split)
    -  much improved IO performance, but most leaf nodes half full
- Efficient alternative 2: **Bottom-up B$^+$-tree construction**
    - As before sort entries
    - And then create tree layer-by-layer, starting with leaf level
    -  details as an exercise
    - Implemented as part of bulk-load utility by most database systems


---

### B$^+$-Tree Index File Example

<figure>
 <img src="{{HTTPS_FQDN}}/static/images/Chapter.14.Bulk.And.Sequential.Loading.png" style="width:75%"/>
 <figcaption>B<sup>+</sup>-tree loaded two different ways</figcaption>
</figure>


---

{{HIDDEN}}

### Indexing on Flash

- Random I/O cost much lower on flash
    - 20 to 100 microseconds for read/write
- Writes are not in-place, and (eventually) require a more expensive erase
- Optimum page size therefore much smaller
- Bulk-loading still useful since it minimizes page erases
- Write-optimized tree structures (discussed later) have been adapted to 
<p>minimize page writes for flash-optimized search trees</p>


---

{{HIDDEN}}

### Indexing in Main Memory

- Random access in memory 
    - Much cheaper than on disk/flash
    - But still expensive compared to cache read
    - Data structures that make best use of cache preferable
    - Binary search for a key value within a large B$^+$-tree node results in 
<p>many cache misses</p>
- B$^+$- trees with small nodes that fit in cache line are preferable to reduce 
<p>cache misses</p>
- Key idea:  use large node size to optimize disk access, but structure 
<p>data within a node using a tree with small node size, instead of using an </p>
<p>array.</p>


---

### Tomorrow

- Hashing
