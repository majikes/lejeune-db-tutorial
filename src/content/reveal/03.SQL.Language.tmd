---
title: {{TITLE}}
theme: "lejeune"
separator: "^---"
verticalSeparator: "<!--v-->"
notesSeparator: "^Note:"
revealOptions:
    transition: fade


---

### Introduction to SQL

- By the end of class you should know:
  - SQL Data (Table) Definition
  - Basic Query Structure of SQL Queries
    - We will cover a laundry list of commands
    - **Please** ask questions!!!
    - If no questions, lecture will go too fast
  - Additional Basic Operations
  - Null Values (Optional)
  - Aggregate Functions
  - Modification of the Database (Optional)


Note:

https://www.db-book.com/slides-dir/PDF-dir/ch3.pdf

---

### SQL Commands Covered today

- Everyday SQL commands to manipulated the data
  - Create a table
    - DBMA normally does
    - Helpful to understand &amp; visualize the table
  - Query information from the database
  - Insert tuples into the database
  - Modify tuples in the database
  - Delete tuples from the database

---

{{HIDDEN}}

### Data Definition Language

- **DDL** allows the specification of information about relations, including:
  - The schema for each relation.
  - The type of values associated with each attribute.
  - The Integrity constraints
  - The set of indices to be maintained for each relation.
  - Security and authorization information for each relation.
  - The physical storage structure of each relation on disk.

Note:

DDL describes
 - The schema for each relation / table  
 - The type (integer, float, text) of each attribute  
 - Any integrity constraints (bank balances must be $\ge$ 0)  
 - Which indices exist for which attributes
 - The storage layout ISAM, B$^+$ tree, etc

---

{{HIDDEN}}

### DDL Domain Types in SQL

- Most common SQL types:
  - **char(n).** Fixed length string of $n$ character string
  - **varchar(n).** Variable length string of max $n$ characters
  - **int.** Integer (machine-dependent length bits)
  - **smallint.** Small integer (machine-dependent length bits)
  - **numeric(p,d).** Fixed point number (precision $p$ digits, max $d$ to right of decimal
    -  **numeric**(3,1), allows 44.5 to be stores exactly, but not 444.5 or 0.32
  - **real** &amp; **double precision.** Floating point and double-precision floating point
  - **float(n).** Floating point number, with at least $n$ digits.
- More are covered in Chapter 4.


---

### Create Table Construct

- Relation is defined using the **create table** command:
   - Each table must have a name
   - Each column or attribute must have a name &amp; type
   - Tables can have integrity constraints:
     - Bank balances can't be less than zero
     - Only one submission of each assignment / student
     - Each paygrade must be associated with a rank
- To define the [instructor relation with a minimum salary]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.check)
```
CREATE TABLE Instructor (
      ID char(5),
      name varchar(20),
      dept_name varchar(20),
      salary numeric(8,2) 
        constraint minimum_wage
          check (salary >= 4000))
```

Note:

This table is does not include the primary key and the foreign key reference

<b>Try changing the minimum wage to $50,000</b>

---

### And a Few More Relation Definitions

- Don't allow a Student table's row to have a dept_name value that is **NOT** in the department table's primary key.
  - [Try this]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.foreign.key)
```sql
CREATE TABLE IF NOT EXISTS Student (
              ID char(5),
              name varchar(20),
              dept_name varchar(20),
              tot_cred numeric(3,0),
              primary key (ID),
              foreign key (dept_name) references department)
```


Note:

Note that student references depart_name from department relation

<b> What if you changed History to history?</b>

<b> What if you changed the history building to H1</b>

---

{{HIDDEN}}

### And more still

```
CREATE TABLE Course (
     course_id varchar(8),
     title varchar(50),
     dept_name varchar(20),
     credits numeric(2,0),
     primary key (course_id), foreign key (dept_name) references department)
```


---

### Updates to tables

- **Insert** [Insert Majikes into the instructor table]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.insert.instructor)
```
INSERT INTO Instructor (ID, name, dept_name, salary)
      VALUES ('150150', 'Majikes', 'Comp. Sci.', 90000)
```
- **Delete** [Remove all tuples from the $student$ relation]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.delete.student)
```
DELETE FROM Student
```
- **Drop Table**
```
drop table r
```
- Try the links above to test out insert and delete

Note:

You can play with these commands to see how they work.

Make yourself an instructor in a class.

---

{{HIDDEN}}

### Updates to tables II

- **[Alter]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.alter.instructor)** adding an attribute
```
alter table r add A D
```
  - where $A$ is the name of the attribute to be added to relation $r$ and $D$ is the domain of $A$.
  - All exiting tuples in the relation are assigned <i>null</i> as the value for the new attribute.

- **Alter** dropping an attribute or column
```
alter table r drop A
```
  - where $A$ is the name of an attribute of relation $r$


---

### Getting data out of the database
#### SELECT is the most used SQL command

- The basic SQL query structure has the form:
```
SELECT A1, A2, ..., An
  FROM R1, R2, ..., Rm
 WHERE P
```
  - $A_i$ represents an attribute
  - $R_i$ represents a relation
  - $P$ is a predicate.
    - Can be compound with **and** and **or**
- The result of an SQL query is a relation multiset.
  - Each row in a database table (relation) is unique
  - But each row in a query result may not be unique
  - Hence, SQL query results are multisets


---

### The select Clause

- **select** clause lists attributes desired in result
- [Example: find the names of all instructors:]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.Select.Attribute)

```
SELECT name
  FROM instructor
```

- SQL names are case insensitive
  - You may use upper- or lower-case letters
  - $Name \equiv NAME \equiv name$
  - Be consistent!!  I try to:
    - Lower case attributes
    - Table names capitalized first letter
    - Upper case keywords
  - SQL names are case insensitive; data is not
    - How would you do a [case insensitive data test?]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.case.insensitive)
    - You'd use an function called upper or lower!

Note:

There are two sql panels on this page

---

### The select Clause (Cont.)

- SQL allows duplicates in relations / query results.
  - A multiset
  - Force the elimination of duplicates, use keyword **distinct**
- Find the [distinct department names of all instructors]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.distinct)
```sql
SELECT DISTINCT dept_name
       FROM Instructor
```
- An asterisk in the select clause denotes 'all attributes' 
```sql
SELECT * FROM Instructor
```
- **select** clause can contain [arithmetic expressions]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.monthly.instructor.salary)
  - The operation, +, –, ∗, / and //
  - List the instructor names and their monthly salary:
```sql
SELECT name, salary/12
       FROM instructor
```
  - Rename to monthly_salary and do float division:
```sql
SELECT name, salary/12.0 as monthly_salary
      FROM instructor
```

Note:

There are two examples here.

1. shows the use of the distinct operand
2. shows integer / float division.  Also formatting

---

### The where Clause

- **where** clause uses predicate to limit the rows returned
- To only show the instructors in the CS department
```
select name
       from instructor
       where dept_name = 'Comp. Sci.'
```
- SQL allows logical connectives **and**, **or**, and **not**
- SQL uses comparison operators $\lt, \lt=, =$ and $\gt=$
- List [computer science instructors]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.instructors.salary.gt8000) with salary $\gt 80000$
```
SELECT name
       FROM Instructor
       WHERE dept_name = 'Comp. Sci.' AND
             salary > 80000
```
- After trying out that page, let's try a worksheet our [worksheet on select and where](http://lejuene.majikes.net/worksheets/worksheet-03-01-select-instructor#questions)
  - Be careful!

Note:


The where clause limits what gets displayed.  
First show only CS professors  
Second show only CS professors who make more than $80,000  

<b>In the worksheet I spelled lejeune wrong!</b>  
Discuss http versus https  

See if any marines copied from each other!   
The no more than is a tough question  

---

### The from Clause

- The **FROM** clause lists the relations involved in the query
   - Causes a Cartesian product matching all rows in both tables
- Find the [Cartesian product instructor $\times$ teaches]({{HTTPS_FQDN}}/sql/interpreter/Chapter.02.Figure.2.12.Cartesian.Product)
```sql
select *
       from instructor, teaches
```
- Generates every possible instructor – teaches pair
  - Would it be useful to have each marine's name matched with every other marine's medical records?
- Cartesian product not very useful directly
  - Useful when combined with where-clause condition
  - Limit the selection by WHERE clause (next slide)

Note:

Cartesian product example show how big and non-useful Cartesian product alone is

Would you want the data of the name of every marine with the medical records of every marine?

Cartesian product is not helpful without the WHERE clause  

---

### Cartesian product with WHERE  
#### WHERE clause limits the rows returned!

- List instructor names who have taught some course and the course_id
```sql
SELECT name, course_id
       FROM instructor, teaches
       WHERE instructor.ID = teaches.ID
```
- List [computer science instructors who have taught some course and the course_id]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.comp.sci.instructor.course_id)
```
SELECT name, course_id
       FROM instructor, teaches
       WHERE instructor.ID = teaches.ID and
             instructor.dept_name = 'Comp. Sci.'
```
- My rule of thumb
  - Join the primary key in each relation in the FROM clause with another relation's primary key
  - Prevents irrelevant output like the Cartesian product

Note:

This is a good time to explain why you iteratively develop.  

The instructor.ID matching the teaches.ID limits the output.

Maybe you want to display one thing from each table like the name and course_id they teach.  


---

{{HIDDEN}}

### The Rename Operation

- SQL allows renaming relations / attributes using the **AS** clause
  - List [all instructor names who have a higher salary than some computer science instructor]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.instructor.salary.gt.comp.sci)
```
SELECT DISTINCT I.name
  FROM Instructor as I, instructor as CS
 where I.salary > CS.salary and
       CS.dept_name = 'Comp. Sci.' 
```
- Cautions
  - Joining a table to itself is a self-join operation
  - Keyword **AS** is optional and may be omitted<br />`instructor as T` $\equiv$ `instructor  T`
  - I commend you to always use AS

Note:

Show how this actually shows all but the lowest salary computer science instructor!

Do an example with the department name

---

### String Operations

- SQL includes a string-matching operator
  - Useful for comparisons on character strings.
  - Operator **like** uses patterns w/ two special characters:
    - percent ( % ).  Matches any **substring**.
    - underscore ( _ ).  Matches any **character**.
- List [instructor names whose name includes the substring “an”]({{HTTPS_FQDN}}//sql/interpreter/Chapter.03.string.wildcards).
```
SELECT name
  FROM Instructor
 WHERE name LIKE '%an%'
```

Note:

Since SQL was started in the 1970s, notice how it doesn't use _normal_ regular expressions!

Be careful.  Try without the LIKE and use =

---

### String Operations (Cont.)

- Patterns are case sensitive. 
- Pattern matching examples:
   - 'Intro%' matches any string beginning with “Intro”.
   - '%Comp%' matches any string containing “Comp” as a substring.
   - '_ _ _' matches any string of exactly three characters.
   - '_ _ _ %' matches any string of at least three characters.
- [SQL supports a variety of string operations]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.string.concat.len.upper) such as
   - concatenation (using “||”)
   - converting from upper to lower case (and vice versa)
       - **upper()** and **lower()**
   - finding string length, extracting substrings, etc.
       - **length()**, **substring()**

Note:

Decide if students want to go into all this detail.

There are lots of examples in the SQL page on string and concatenation link

---

### Ordering the Display of Tuples

- List in alphabetic order the names of all instructors
```sql
select distinct name
            from instructor
            order by name
```
- Specify **desc** / **asc** for descending /ascending order
   - Can be specified for each attribute
   - Ascending order is the default.
   - Example: `order by name desc`
- [Can sort on multiple attributes]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.order) (comma separated)
  - Example: `order by dept_name, name`
- **Do you want to know about missing data? Null values?**

Note:

The sql panel shows examples of how to specify alphabetical ordering of salary decreasing and name ascending

<!--v-->

### Null Values

- Attributes may have null value, denoted by **null**
  - **null** signifies unknown value or value does not exist.
- The predicate <b>is null</b> can be used to check for null values.
  - Example: Find all instructors whose salary is null<i>.</i>
```
select name
  from instructor
 where salary is null
```
- The predicate **is not null** returns
  - True if the value is **not null**
  - False otherwise
- [Seems pretty straightfoward!?]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.null.values)

Note:

NULL seems to give people a hard time.

I believe it's due to the fact that they don't plan on Null

---

{{HIDDEN}}

### Null Values (Cont.)

- SQL [treats as **unknown** the result of any comparison involving a null value]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.null)
   - Excludes comparison of **is null** and **is not null**
   - Example: `5 < null` or ` null != null` or `null = null`
- The predicate in a **where** clause can involve Boolean operations
   - **and**:
     - `true and unknown` = `unknown`
     - `false and unknown` = `false`
     - `unknown and unknown` = `unknown`
   - **or**:
     - `unknown or true` = `true`
     - `unknown or false` = `unknown`
     - `unknown or unknown` = `unknown`
- Result of **where** clause predicate is treated as `false` if it evaluates to `unknown`

Note:

It's important to know what the result of any null logical comparison is!

Use the below with things like 
``` 
select "5<null" as '';
SELECT null and 1;
```

{{HTTPS_FQDN}}/sql/interpreter/Chapter.03.null

---

### Aggregate Functions
- These functions operate on the multiset of values of a column of a relation, and return a value
  - **avg**: average value
  - **min**: minimum value
  - **max**: maximum value
  - **sum**: sum of values
  - **count**: number of values
- Many ways to specify an input multiset

Note:

Trick here is what is a multiset

---

### Aggregate Functions Examples

- Find the average instructor salary of instructors in the Computer Science department 
```
select avg(salary) from instructor where dept_name = 'Comp. Sci'
```
- Find the total number of instructors who teach a course in the Spring 2018 semester
```
select count(distinct ID)
  from teaches
 where semester = 'Spring' and
       year = 2018
```
- Find [the number of tuples in the <i>course </i>relation]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.aggregates)
```
select count(*) from course
```
- Let's [try aggregate worksheet]({{HTTPS_FQDN}}/worksheets/worksheet-03-02-aggregates)
- **Do you want to learn how to modify the database?**

Note:

BEFORE going onto group by check for questions


https://lejeune.majikes.net/worksheets/worksheet-03-02-aggregates?onyen=student1


<!--v-->

### Modification of the Database

- Three main ways to modify the data
  - Tuple (row) deletion from a relation (table)
  - Row insertion into a table
  - Updating of values in some rows in a given table


<!--v-->

### Deletion

- Delete [all instructors]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.delete)
```
delete from instructor
```
- Delete all instructors from the Finance department
```
delete from instructor where dept_name = 'Finance'
```
- Delete all instructors associated with departments in the Watson building
```
delete from instructor
 where dept_name in (select dept_name
                       from department
                      where building = 'Watson')
```


<!--v-->

### Deletion (Cont.)

- This is a hard one!
  - The test of salary is a subquery
  - We will only show this one!
- Delete [all instructors whose salary is less than the average salary of instructors]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.delete.average)
   - Problem: As tuples deleted from _instructor_, the average salary changes
   - Solution used in SQL:
     1. First, compute **avg**(salary)
     2. Find all tuples to delete in subquery
     2. Delete all tuples above static average
```
delete from instructor
 where salary < (select avg(salary) 
                          from instructor
                        )
```

<!--v-->

### Insertion

- Add [a new tuple to _course_]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.insert.simple)
```
insert into course
             values('CS-421', 'Database Systems', 'Comp. Sci.', 3)
```
- or safer by explicitly stating fields
```
insert into course (course_id, title, dept_name, credits)
             values('CS-421', 'Database Systems', 'Comp. Sci.', 3)
```
- Add a new tuple to _student_ with <i>tot_creds</i> set to null
```
insert into student
             values('3003', 'Green', 'Finance', null)
```

<!--v-->

### Updates

- [Give a 5% salary raise to all instructors]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.update.percentage)
```
update instructor
   set salary = salary * 1.05
```
- Give a 5% salary raise to those instructors who earn less than 70000
```
update instructor
   set salary = salary * 1.05
 where salary < 70000
```


---

{{HIDDEN}}

### Updates (Cont.)

- Increase salaries of instructors whose salary is over $90,000 by 3%, and all others by a 5% 
  - Write two **update** statements:
```
update instructor
   set salary = salary * 1.03
 where salary > 90000;
update instructor
   set salary = salary * 1.05
 where salary <= 90000
```
  - The order is important
  - Can be done better using the **case** statement

Note:

Ask students why the order is important.  
 - What should the raise be for someone making 89,999?
 
---

{{HIDDEN}}

### Case Statement for Conditional Updates

- Same query as before but with [case statement]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.case)
```
update instructor
   set salary = case
                   when salary <= 90000 then salary * 1.05
                   else salary * 1.03
                end
```

---

{{HIDDEN}}

### Updates with Scalar Subqueries

- [Recompute and update tot_creds value]({{HTTPS_FQDN}}/sql/interpreter/Chapter.03.update.scalar) for all students
```
update student S
    set tot_cred = (select sum(credits)
                      from takes, course
                     where takes.course_id = course.course_id and
                           S.ID= takes.ID and
                           takes.grade <> 'F' and
                           takes.grade is not null)
```
- Sets <i>tot_creds</i> null for students who have not taken any course

---

{{HIDDEN}}

### Updates with Scalar Subqueries 

- Instead of **sum**(_credits_) only when not Null
- Set to zero otherwise
- Use:
```
update student
    set tot_cred = (select
                     case
                      when sum(credits) is not null then sum(credits)
                      else 0
                     end  
                      from takes, course
                     where takes.course_id = course.course_id and
                           student.ID= takes.ID and
                           takes.grade <> 'F' and
                           takes.grade is not null)
```

Note:

SQLite does not support the rename on Update

UPDATE Student S SET should be UPDATE Student SET

---

### Chapter 3 Part II Epilogue

- We have covered a lot. 
- You should recognize how to create a table
  - The DBMA would probably do that for you
- You should have a pretty good idea how to get data from the database
  - Basic selects, multiple relations, and aggregates
- Hopefully you know some of the security behind databases
 
