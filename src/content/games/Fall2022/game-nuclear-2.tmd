<%
import json
from datetime import datetime
with open('game-nuclear.json') as fid:
    game_data = json.load(fid)
NUM_TEAMS = game_data['NUM_TEAMS']
NUM_MEMBERS = game_data['NUM_MEMBERS']
points_limit = 100
setInfo(
        needsSubmitCode=True,
        assessment_type='game',
        due='2022-10-24 10:55:00',
        exceptions=dict(jess53=dict(needsSubmitCode=False, due='2022-10-28 00:00:00'),
                        _003=dict(needsSubmitCode=False)),
        pages=['questions', 'submit'],
        max_segments=3,
        maxpenalty=1.00, penalty=.20,
        points_limit=points_limit,
        points_total=NUM_TEAMS*NUM_MEMBERS*points_limit,
       )
dbs=[f'game-nuclear{team_number%NUM_TEAMS}{member_number%NUM_MEMBERS}.sqlite']

%>

<img src="{{LOGO}}" style="float:right; vertical-align:0px"/>

# 2 Nuclear Database Escape Room

<div>
  <center><img src="{{static('images/PressurizedWaterReactor.png')}}" style="width: 50%"/></center>
  <div style="text-align: center" >Graphic by Sarah Harman | U.S. Department of Energy </div>
</div>

---

## {{!linkable_header('SQL Tutorial Cheat Sheet')}}

Following are three SQL tutorial cheat sheets available from http://www.sqltutorial.org

<img src="{{static('images/SQLTutorial.1.jpeg')}}" style="width:85%" alt="First of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.2.jpeg')}}" style="width:85%" alt="Second of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.3.jpeg')}}" style="width:85%" alt="Third of three SQL Tutorial cheat sheets"/>

---

## {{!linkable_header('Nuclear Game Database Schema')}}

Here is the tables you'll find for the database used in the games.
 
<div class="row">
  <pre>
   <code class="sql">
% for line in game_data['schema'].split('\n'):
   {{!line}}   
% end
   </code>
  </pre> 
</div>


---

## {{!linkable_header('Game format')}}


The game is multiple submissions.
You answer one part of the game, submit it, and you are presented with the next stage of the game.
Once you submit a part of the game, you <font color='red'>cannot</font> go back.

In the following scratch space.
You can use it to test out queries.
There are no points for the following SQL query.
It is a scratch pad.
{{!sql(''' select 1 ''', name='_scratch_sql_queries_1', dbs=dbs)}}

---

% if 'questions' in pages:
## {{!linkable_header('Questions')}}

<%
from collections import namedtuple
PART_QUESTION = namedtuple('PART_QUESTION', 'desc_text desc_order sql_fields sql_order desc_count_order sql_count_order')
part_questions = [PART_QUESTION(desc_text='all the part names and the name of their company',
                                desc_order='part names in alphabetically ascending order and the company names in alphabetically descending order',
                                sql_fields='P.part_name, C.name',
                                sql_order='P.part_name ASC, C.name DESC',
                                desc_count_order='the parts in alphabetical order',
                                sql_count_order='P.part_name ASC'),
                  PART_QUESTION(desc_text='all the company names and the names of the parts they make',
                                desc_order='company names in alphabetically ascending order and the part names in alphabetically descending order',
                                sql_fields='C.name, P.part_name',
                                sql_order='C.name ASC, P.part_name DESC',
                                desc_count_order='the parts in descending alphabetical order',
                                sql_count_order='P.part_name DESC'),
                  PART_QUESTION(desc_text='all the part names and the name of their company',
                                desc_order='companies in alphabetically descending order and the part names in alphabetically ascending order',
                                sql_fields='P.part_name, C.name',
                                sql_order='P.part_name ASC, C.name DESC',
                                desc_count_order='the parts in ascending order of the number of companies',
                                sql_count_order='count(*) ASC'),
                  PART_QUESTION(desc_text='all the company names and the names of the parts they make',
                                desc_order='part names in alphabetically descending order and the company names in alphabetically ascending order',
                                sql_fields='C.name, P.part_name',
                                sql_order='C.name ASC, P.part_name DESC',
                                desc_count_order='the parts in descending order of the number of companies',
                                sql_count_order='count(*) DESC')]
%>
% for team in range(NUM_TEAMS):
   % for member in range(NUM_MEMBERS):

     % if section == '003' or ((member_number % NUM_MEMBERS) == member and (team_number % NUM_TEAMS) == team):
       % gd = game_data[f'{team}{member}']
       % index = member % len(part_questions)


Given the information so far, you called {{gd['contact_info']['phone_number']}}.
The contact's name is {{gd['contact_info']['name']}}.
You couldn't have gotten a more reassuring person.
The phone call goes something like this:

> I have a hunch.
>
> I think the insurgent group is a commercial entity supply company.
> They've been supplying the power plant with sabotaged parts such that they can start a meltdown remotely.
> I believe they didn't just put in a faulty water pump or something,
> but they put lots, if not all, of the major component of the system!
>
> I hope you're a good SQL programmer.  This is going to be tough.
> 
> Can you get a list of all the parts used in the nuclear power plant along with the part's company?

**Parts.list.{{team}}.{{member}}:** List {{part_questions[index].desc_text}} that are used within the nuclear power plant.
To make it easier on analysis, put the {{part_questions[index].desc_order}}.  
% answer = f'''
SELECT {part_questions[index].sql_fields}
  FROM Parts AS P, Companies AS C
 WHERE P.company_id = C.id
 ORDER BY {part_questions[index].sql_order}  '''
{{!sql(answer, dbs=[gd['database_fn']], points=40, name=f' Parts.list.{team}.{member}')}}
% include('viewAnswer')

---

After giving the previous list to {{gd['contact_info']['name'].split()[0]}}
you have the following information..

> That list was not much help.  It's too large
>
> Can you list the parts and for each part, count the number of companies who made the part?
>
> Maybe that will give us a clue.

**Parts.count.{{team}}.{{member}}:** List part names and the number of companies that make the part.
To make it easier on analysis, put the {{part_questions[index].desc_count_order}}.  
% answer = f'''
SELECT P.part_name, count(*)
  FROM Parts AS P, Companies AS C
 WHERE P.company_id = C.id
 GROUP BY P.part_name
 ORDER BY {part_questions[index].sql_count_order}  '''
{{!sql(answer, dbs=[gd['database_fn']], points=40, name=f' Parts.count.{team}.{member}')}}
% include('viewAnswer')

---

After giving this count list to {{gd['contact_info']['name'].split()[0]}}
you have the following information..

> That list was better.
>
> Do you know how to do division operations?
> Could you list all the companies who makes all the parts?

**Company.all.parts.{{team}}.{{member}}:** List all the companies who make all the parts.
% answer = f'''
SELECT Z.name
  FROM Companies as Z
 WHERE NOT EXISTS (SELECT Y.part_name
                     FROM Parts as Y
                   EXCEPT
                   SELECT W.part_name
                     FROM Parts as W, Companies as X
                    WHERE X.name=Z.name AND
                          W.company_id = X.id)
'''
{{!sql(answer, dbs=[gd['database_fn']], points=20, name=f' Company.all.parts.{team}.{member}', sort=True)}}
% include('viewAnswer')

---

   %end
 %end
%end

---

% if 'submit' in pages:
% include('games-pledge.md', segment='1')
% include('submit.md')
%end
