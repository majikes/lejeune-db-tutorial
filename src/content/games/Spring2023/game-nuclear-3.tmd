<%
import json
from datetime import datetime, date
with open('game-nuclear.json') as fid:
    game_data = json.load(fid)
NUM_TEAMS = game_data['NUM_TEAMS']
NUM_MEMBERS = game_data['NUM_MEMBERS']
points_limit = 100
setInfo(
        needsSubmitCode=True,
        assessment_type='game',
        due='2023-03-23 11:00:00',
        exceptions=dict(gigicole=dict(needsSubmitCode=False, due='2023-03-24 02:00:00'),
                        student1=dict(needsSubmitCode=False),
                        student2=dict(needsSubmitCode=False),
                        student3=dict(needsSubmitCode=False),
                        student4=dict(needsSubmitCode=False),
                        student5=dict(needsSubmitCode=False),
                        _003=dict(needsSubmitCode=False)),
        pages=['questions', 'submit'],
        max_segments=3,
        maxpenalty=1.00, penalty=.20,
        points_limit=points_limit,
        points_total=NUM_TEAMS*NUM_MEMBERS*points_limit,
       )
dbs=[f'game-nuclear{team_number%NUM_TEAMS}{member_number%NUM_MEMBERS}.sqlite']

%>

<img src="{{LOGO}}" style="float:right; vertical-align:0px"/>

# 3 Nuclear Database Escape Room

<div>
  <center><img src="{{static('images/NuclearPlantRooms.jpg')}}" style="width: 50%; transform:rotate(90deg);"/></center>
  <div style="text-align: center" >Emirates Nuclear Energy Corporation, United Arab Emerates</div>
</div>

---

## {{!linkable_header('SQL Tutorial Cheat Sheet')}}

Following are three SQL tutorial cheat sheets available from http://www.sqltutorial.org

<img src="{{static('images/SQLTutorial.1.jpeg')}}" style="width:85%" alt="First of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.2.jpeg')}}" style="width:85%" alt="Second of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.3.jpeg')}}" style="width:85%" alt="Third of three SQL Tutorial cheat sheets"/>

---

## {{!linkable_header('Nuclear Game Database Schema')}}

Here is the tables you'll find for the database used in the games.
 
<div class="row">
  <pre>
   <code class="sql">
% for line in game_data['schema'].split('\n'):
   {{!line}}   
% end
   </code>
  </pre> 
</div>

---

## {{!linkable_header('Game format')}}


The game is multiple submissions.
You answer one part of the game, submit it, and you are presented with the next stage of the game.
Once you submit a part of the game, you <font color='red'>cannot</font> go back.

In the following scratch space.
You can use it to test out queries.
There are no points for the following SQL query.
It is a scratch pad.
{{!sql(''' select 1 ''', name='_scratch_sql_queries_1', dbs=dbs)}}

---

% if 'questions' in pages:
## {{!linkable_header('Questions')}}

<%
from collections import namedtuple
EMPLOYEE_Q = namedtuple('EMPLOYEE_Q', '''desc_text desc_order sql_fields sql_order
                                         room_text, room_sql_fields, room_order, room_sql_order, 
                                         employee_count_order, employee_count_sql_order''')
employee_qs = [EMPLOYEE_Q(desc_text='all the employee names, their street number and street name',
                          desc_order='employee names in alphabetically descending order',
                          sql_fields='P.name, P.address_number, P.address_street_name',
                          sql_order='P.name DESC',
                          room_text='the employee names, names of the rooms they went into, and the time they opened the door',
                          room_sql_fields='P.name, R.name, D.open_time',
                          room_order='the employee name alphabetically, the room names alphabetically, and the times sequentially',
                          room_sql_order='P.name ASC, R.name ASC, D.open_time ASC',
                          employee_count_order='the employee name alphabetically and the count from highest to lowest',
                          employee_count_sql_order='P.name ASC, count(*) DESC'),
               EMPLOYEE_Q(desc_text='all the employee names and their phone numbers',
                          desc_order='employee names in alphabetically ascending order',
                          sql_fields='P.name, P.phone_number',
                          sql_order='P.name ASC',
                          room_text='the employee names, times they opened each door, and the room the door goes into',
                          room_sql_fields='P.name, D.open_time, R.name',
                          room_order='the employee name inverse alphabetically, the room names alphabetically, and the times sequentially',
                          room_sql_order='P.name DESC, R.name ASC, D.open_time ASC',
                          employee_count_order='the employee name reverse alphabetically and the count open count from highest to lowest',
                          employee_count_sql_order='P.name DESC, count(*) DESC'),
               EMPLOYEE_Q(desc_text='all the employee names and their employment type',
                          desc_order='the employee types alphabetically',
                          sql_fields='P.name, P.employee_type',
                          sql_order='P.employee_type ASC',
                          room_text='the names of the employees, the names of the rooms they went into, and the time they opened the door',
                          room_sql_fields='P.name, R.name, D.open_time',
                          room_order='the employee name alphabetically, the room names inverse alphabetically, and the times sequentially',
                          room_sql_order='P.name ASC, R.name DESC, D.open_time ASC',
                          employee_count_order='the door open count from highest to lowest and the employee name alphabetically',
                          employee_count_sql_order='count(*) DESC, P.name ASC'),
               EMPLOYEE_Q(desc_text='all the employee names, their phone_number, and their street name',
                          desc_order='the employee names alphabetically',
                          sql_fields='P.name, P.phone_number, P.address_street_name',
                          sql_order='P.name ASC',
                          room_text='the employee names, the times they opened each door, and the room names the door goes into',
                          room_sql_fields='P.name, D.open_time, R.name',
                          room_order='the employee names alphabetically, the room names inverse alphabetically, and the times sequentially',
                          room_sql_order='P.name ASC, R.name DESC, D.open_time ASC',
                          employee_count_order='the count from highest to lowest and the employee name reverse alphabetically',
                          employee_count_sql_order='count(*) DESC, P.name DESC')]
%>
% for team in range(NUM_TEAMS):
   % for member in range(NUM_MEMBERS):

     % if section == '003' or ((member_number % NUM_MEMBERS) == member and (team_number % NUM_TEAMS) == team):
       % gd = game_data[f'{team}{member}']
       % incident_date_str = gd['report_info']['incident_date_str']
       % incident_date = gd['report_info']['incident_date']
       % index = member % len(employee_qs)
       % company_name = gd['company_info']['name']
       % contact_name = gd['contact_info']['name']


Given the information so far, you called {{gd['contact_info']['phone_number']}}.
The contact's name is {{contact_name}}.

You've also discovered that one company, {{company_name}}, was the manufacturer / installer
of _all_ the parts that were repaired at the SQL City Nuclear Power Company.

You have another call with {{contact_name.split()[0]}} that goes something like this:

> That is really weird that one company fixed turbines, pumps and control rods.
> I personally know people at {{company_name}}.
> I cannot believe someone there would sabotage the plant.
>
> Unless the person who sabotaged the plant did not really work for {{company_name}}!
> Maybe someone got into their system and planted a rouge employee.
> I wonder if they have good SQL security at {{company_name}}!?!?!
>
> Regardless, let's follow the lead.
> Let's see what employees from {{company_name}} were in the plant.
> Maybe we can figure something out from there.

**Parts.list.{{team}}.{{member}}:** List {{employee_qs[index].desc_text}} who work for {{company_name}}.
To make it easier on analysis, put the {{employee_qs[index].desc_order}}.  
% answer = f'''
SELECT {employee_qs[index].sql_fields}
  FROM Persons AS P, Companies as C
 WHERE C.name='{company_name}' AND
       C.id=P.company_id
 ORDER BY {employee_qs[index].sql_order}  '''
{{!sql(answer, dbs=[gd['database_fn']], points=20, name=f' Parts.list.{team}.{member}')}}
% include('viewAnswer')

---

After giving the previous list to {{contact_name.split()[0]}}
you have the following information..

> That list was not much help.  It's too large
>
> Can you get the employees from {{company_name}} and the rooms they were in?
> Using this we may find out who went into most of the rooms and replaced the sabotaged parts!


**Employee.rooms.{{team}}.{{member}}:** For the employees from {{company_name}} list {{employee_qs[index].room_text}}.
To make it easier on analysis, put the {{employee_qs[index].room_order}}.  
% answer = f'''
SELECT {employee_qs[index].room_sql_fields}
  FROM Rooms AS R, Door_Opened as D, Badge_Readers as BR, Badges as B, Persons as P, Companies as C
 WHERE C.name='{company_name}' AND
       C.id=P.company_id AND
       P.id = B.persons_id AND
       BR.to_room = R.id AND
       BR.id = D.badge_reader_id AND
       D.badge_id = B.id
 ORDER BY {employee_qs[index].room_sql_order}  '''
{{!sql(answer, dbs=[gd['database_fn']], points=40, name=f' Employee.rooms.{team}.{member}')}}
% include('viewAnswer')

---

After giving this count list to {{contact_name.split()[0]}}
you have the following information..

> That list was better. 
>
> Maybe we can narrow this down by seeing who went into the most rooms.
> Can we get the list of {{company_name}} employees and the number of times they opened any doors?


**Employee.Door.Counts.{{team}}.{{member}}:** List the names of the employees from {{company_name}}, their badge id,
and the number of times they opened **any** door in the nuclear power plant?  
To make it easier on analysis, put the {{employee_qs[index].employee_count_order}}.
% answer = f'''
SELECT P.name, B.id, count(*) as count
  FROM Rooms as R, Door_Opened as D, Badge_Readers as BR,
       Badges as B, Persons as P, Companies as C
   WHERE C.name='{company_name}' AND
         C.id=P.company_id AND
         P.id = B.persons_id AND
         BR.to_room = R.id AND
         BR.id = D.badge_reader_id AND
         D.badge_id = B.id
   GROUP BY P.name
   ORDER BY {employee_qs[index].employee_count_sql_order}
'''
{{!sql(answer, dbs=[gd['database_fn']], points=40, name=f' Employee.Door.Counts.{team}.{member}')}}
% include('viewAnswer')

---


After giving the employee door count to {{contact_name.split()[0]}}
you get the following information back.

> Wow.  That one employee opened a whole lot of doors!!!
>
> Hold on.   I see a badge on the floor/

Shots ring out as you submit the worksheet!



   %end
 %end
%end

---

% if 'submit' in pages:
% include('games-pledge.md', segment='1')
% include('submit.md')
%end
