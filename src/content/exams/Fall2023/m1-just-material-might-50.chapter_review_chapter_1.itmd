<%
  import string
  from collections import namedtuple

  database_is_true = ['Database systems are designed to store large bodies of information',
                      'The management of data involves both the definition of structures for the storage of information and the provision of mechanisms for the manipulation of information',
                      'The database system must provide for the safety of the information stored in the face of system crashes or attempts at unauthorized access',
                      'If data is shared among users, the database system must avoid possible anomalous results']
  database_is_false = 'The relational data model is the only model used for storing data in databases'

  DML_is_true = ['The data manipulation language enables users to access data.',
                 'The INSERT statement is a data manipulation language statement.',
                 'The data manipulation language is widely used in retrieving data from relational databases.']
  DML_is_false = 'The data manipulation language is used to specify the database schema.'


  Word_definitions = ['A collection of iterrelated data and the programs to access the data',
                      'Edgar "Ted" Codd',
                      'Data documentation language  ',
                      'A collection of data',
                      'Standard query language',
                      'Fred Brooks',
                      'Data manipulation language',
                      ]
  Word_definition_answers = [3, 0, 1, 6]
  Word_definition_explain = ['page 1 says that a database is a collection of data',
                             'page 1 a DBMS is a collection of interrelated data and the set of programs to access them',
                             'page 26 Edgar Codd proposed relational dbms and got Turing award in 1981',
                             'page 13 says that DDL and DML are the database languages'
                             ]

  DB_problems = ['Larger amounts of storage and the cost to access data in various formats',
                 'Confusion of physical versus logical layer',
                 'Efficient and convenient access to data',
                 'All portions or no portions of a logical unit of work completes. The all-or-none requirement',
                 'Physical layer data abstraction',
                 'University payroll personnel should see financial information but not academic or grade records',
                 'Multiple data updates to a field that occur near simultaneously to each updater without inconsistent results'
                 ]
  DB_answers = [ 3, 5, 6]
  DB_explain = ['page 20 describes atomicity',
                'page 7 says that not ever user should be able to access all data security',
                'page 7 describes concurrent access anomalies'
                ]

  alphabet = list(string.ascii_uppercase)
%>

% for index in range(number_chapter_review):
  % if section == '003' or (team_member_number % number_chapter_review) == index:

   **Databases.Are.{{index+1}}:** Select the letter of the statement below that is false.  
   % for answer_index in range(len(database_is_true)+1):
      % if answer_index < index + 1:
         **{{alphabet[answer_index]}}** {{database_is_true[answer_index]}}  
      % elif answer_index == index + 1:
         **{{alphabet[answer_index]}}** {{database_is_false}}  
      % else:
         **{{alphabet[answer_index]}}** {{database_is_true[answer_index-1]}}  
      % end
   % end
<%
answer = alphabet[index+1]
answer2 = f''' See page 29 third dot
Answer: {answer}'''
%>
   {{!select(answer, alphabet[:len(database_is_true)+1], points=1, name=f' Databases.Are.{index+1}')}}
   % include('viewAnswer', answer=answer2)

---

  % end  # section == 003 or team_member_number%number_chapter_review == index
% end  # for index in range(number_chapter_review)

% for index in range(number_chapter_review):
  % if section == '003' or (team_member_number % number_chapter_review) == index:


   **Data.Manipulation.Language.{{index+1}}:** Select the letter of the data manipulation language statement below that is false or select **{{alphabet[len(DML_is_true)+1]}}** if none of them are false.  
   % for answer_index in range(len(DML_is_true)+1):
      % if answer_index < index:
         **{{alphabet[answer_index]}}** {{DML_is_true[answer_index]}}  
      % elif answer_index == index:
         **{{alphabet[answer_index]}}** {{DML_is_false}}  
      % else:
         **{{alphabet[answer_index]}}** {{DML_is_true[answer_index-1]}}  
      % end
   % end
   **{{alphabet[len(DML_is_true)+1]}}** None of the above are false.  
<%
answer = alphabet[index]
answer2 = f''' See page 29 dot 8 & 9
Answer: {answer}'''
%>
   {{!select(answer, alphabet[:len(DML_is_true)+2], points=1, name=f' Data.Manipulation.Language.{index+1}')}}
   % include('viewAnswer', answer=answer2)

  % end  # section == 003 or team_member_number%number_chapter_review == index
% end  # for index in range(number_chapter_review)

---

% for index in range(number_chapter_review):
  % if section == '003' or (team_member_number % number_chapter_review) == index:

   For the following fill-in-the-blank-questions match 
   the letter for the phrase that best answers
   the following questions.

   % answer = [-1]*4
   % explain = ['']*4
   % for answer_index in range(len(Word_definitions)):
      % word_def_index = (answer_index + index * 3) % len(Word_definitions)
      **{{alphabet[answer_index]}}** {{Word_definitions[word_def_index]}}  
      <%
      if word_def_index in Word_definition_answers:
        this_ans_index = Word_definition_answers.index(word_def_index)
        answer[this_ans_index] = alphabet[answer_index]
        explain[this_ans_index] = Word_definition_explain[this_ans_index]
      end
      %>
   % end
   **H** None of these  

   % answer2=f'''
{answer[0]} {explain[0]}
{answer[1]} {explain[1]}
{answer[2]} {explain[2]}
{answer[3]} {explain[3]}'''

   **Word.Definition.{{index+1}}:** Letter representing the best answer to the question:  
{{!table(inputs=1, headings='Question, Letter of definition', table=f'''
What is a database?,{answer[0]}
What is a database management system?,{answer[1]}
Who proposed and later won a Turing award for the relational database model?,{answer[2]}
What is an example of a database language?,{answer[3]}
''', symbols=alphabet[:8], name=f' Word.Definition.{index+1}', points=4)}}
   % include('viewAnswer', answer=answer2)

  % end  # section == 003 or team_member_number%number_chapter_review == index
% end  # for index in range(number_chapter_review)

---

% for index in range(number_chapter_review):
  % if section == '003' or (team_member_number % number_chapter_review) == index:

   Each of the items in below describe a problem solved by a database.
   The table contains terms of features of a database.
   For each database feature, select the letter of the problem that it solves.  

   % answer = [-1]*3
   % explain = ['']*3
   % for answer_index in range(len(DB_problems)):
      % db_problem_index = (answer_index + index * 3) % len(DB_problems)
      **{{alphabet[answer_index]}}** {{DB_problems[db_problem_index]}}  
      <%
      if db_problem_index in DB_answers:
        this_ans_index = DB_answers.index(db_problem_index)
        answer[this_ans_index] = alphabet[answer_index]
        explain[this_ans_index] = DB_explain[this_ans_index]
      end
      %>
   % end
   **H** None of these  

% answer2=f'''
{answer[0]} {explain[0]}
{answer[1]} {explain[1]}
{answer[2]} {explain[2]}'''

   **DB.Solves.{{index+1}}** For each database feature below, select the letter of the problem that it solves.  
{{!table(inputs=1, headings='Database feature,Problem solved', table=f'''
Atomicity,{answer[0]}
Security,{answer[1]}
Concurrency,{answer[2]}
''', symbols=alphabet[:8], name=f' DB.Solves.{index+1}', points=4)}}
% include('viewAnswer', answer=answer2)

  % end  # section == 003 or team_member_number%number_chapter_review == index
% end  # for index in range(number_chapter_review)

---
