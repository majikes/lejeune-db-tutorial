<%
import json
with open('wkst.university1.json') as fid:
      university_data = json.load(fid)
setInfo(
        assessment_type='worksheet',
       )
dbs = ['wkst.university1.sqlite', 'wkst.university2.sqlite']
%>

<img src="{{LOGO}}" style="float:right; vertical-align:0px; width=50%"/>

% include('worksheet-dont-panic.md')
% include('green-highlight.md')


# Chapter 3 Post class

<!-- https://www.db-book.com/db6/practice-exer-dir/2s.pdf -->
<!-- https://www.db-book.com/Practice-Exercises/PDF-practice-solu-dir/3.pdf -->


---

## {{!linkable_header('SQL Tutorial Cheat Sheet')}}

Following are three SQL tutorial cheat sheets available from http://www.sqltutorial.org

<img src="{{static('images/SQLTutorial.1.jpeg')}}" style="width:85%" alt="First of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.2.jpeg')}}" style="width:85%" alt="Second of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.3.jpeg')}}" style="width:85%" alt="Third of three SQL Tutorial cheat sheets"/>

---

### {{!linkable_header('Database used')}}

The schema for the database used in this class is below.
It is from the database used in chapter 3 of the book 
that describes a university.

<pre>
 <code class="sql">
  % for line in university_data.split('\n'):
    {{line}}
  % end
 </code>
</pre>

---

### {{!linkable_header('Questions')}}

**Three.credit:** Find the title of the courses in the Comp. Sci. department that have three credits.  
<%
answer = '''
SELECT title
  FROM Course
 WHERE dept_name = 'Comp. Sci.' AND
       credits = 3
'''
%>
{{!sql(answer, points=10, name='Three.credit', sort=True, dbs=dbs)}}
% include('viewAnswer')

**Three.credit.relational.algebra:** Which of the following represents the relational
algebra expression for finding the title of the courses in the Comp. Sci. department that have three credits?  
no two companies have the same name.

**A:** $\sigma_{\text{dept}\underline{&nbsp;}\text{name}='\text{Comp. Sci.}' \land \text{credits}=3} (\Pi_\text{title} \text{Course})$  
**B:** $\Pi_\text{title} (\sigma_{\text{dept}\underline{&nbsp;}\text{name}='\text{Comp. Sci.}' \land \text{credits}=3} \text{Course})$  
**C:** $\sigma_{\text{dept}\underline{&nbsp;}\text{name}='\text{Comp. Sci.}'}(\sigma_{\text{credits}=3} (\Pi_\text{title} \text{Course}))$  
**D:** $\sigma_{\text{dept}\underline{&nbsp;}\text{name}='\text{Comp. Sci.}'} (\Pi_\text{title} (\sigma_{\text{credits}=3} \text{Course}))$  
**E:** $\Pi_\text{title} (\sigma_{\text{dept}\underline{&nbsp;}\text{name}='\text{Comp. Sci.}' \lor \text{credits}=3} \text{Course})$  
**F:** None of these  
<%
answer = 'B'
answer2 = f'''Projection done after selecting the rows

Answer {answer}'''
choices = 'ABCDEF'
%>
{{!select(answer, choices, points=10, name='Three.credit.relational.algebra')}}
% include('viewAnswer', answer=answer2)

---

**Highest.Salary:** Find the highest salary of any instructor.   
<%
answer = '''
SELECT max(salary)
  FROM Instructor
'''
%>
{{!sql(answer, points=10, name='Highest.Salary', sort=True, dbs=dbs)}}
% include('viewAnswer')


**Name.Instructor.Highest.Salary:** Find the name of the instructor(s) with the highest salary.  
**Note:** This query built on the last one.
This is iterative development.
<%
answer = '''
SELECT name
  FROM Instructor
 WHERE salary = (SELECT MAX(salary)
                   FROM Instructor I)
'''
%>
{{!sql(answer, points=10, name='Name.Instructor.Highest.Salary', sort=True, dbs=dbs)}}
% include('viewAnswer')

---

**Fall.2017.Courses:** Find the course and section identifier for each section that was offered in Fall 2017.
% answer = '''
SELECT S.course_id, S.sec_id
  FROM Section S
 WHERE S.semester = 'Fall' AND
       S.year = 2017
'''
{{!sql(answer, points=10, name='Fall.2017.Courses', sort=True, dbs=dbs)}}
% include('viewAnswer')

**Fall.2017.CS.101:** Find how many students were enrolled in all sections of course CS-101 in Fall 2017.
% answer = '''
SELECT count(ID)
  FROM Takes T
 WHERE T.semester = 'Fall' AND
       T.course_id = 'CS-101' AND
       T.year = 2017
'''
{{!sql(answer, points=10, name='Fall.2017.CS.101', sort=True, dbs=dbs)}}
% include('viewAnswer')


**Fall.2017.Enrollment:** Find the course and section identifier for each section that was offered in Fall 2017.
Also show the number of students enrolled in each section.  
**Note:** This query built on the last two.
This is iterative development.
% answer = '''
SELECT S.course_id, S.sec_id, (SELECT count(ID)
                                 FROM Takes T
                                WHERE T.semester = S.semester AND
                                      T.course_id = S.course_id AND
                                      T.sec_id = S.sec_id)
  FROM Section S
 WHERE S.semester = 'Fall' AND
       S.year = 2017
'''
{{!sql(answer, points=10, name='Fall.2017.Enrollment', sort=True, dbs=dbs)}}
% include('viewAnswer')

---

**Create.Table.Grade.Points:** Create a table Grade_points as
```
grade_points(student_id, GPA) 
```
<%
answer = '''
PRAGMA FOREIGN_KEYS = ON;
DROP TABLE IF EXISTS Grade_points;
CREATE TABLE Grade_points (student_id varchar(5),
                           GPA float CHECK(GPA between 0 AND 4),
                           primary key(student_id),
                           foreign key(student_id) references Student(ID) 
                                   ON DELETE CASCADE)
'''
ics = [
'''PRAGMA FOREIGN_KEYS=ON;
INSERT INTO Student (ID, name, dept_name, tot_cred) VALUES ('-new-', '-new-student-added-', 'Comp. Sci.', 0);
INSERT INTO Grade_points (student_id, GPA) VALUES ('-new-', 1.1);
SELECT *
  FROM Student S, Grade_points G
 WHERE S.ID = G.student_id AND
       S.ID = '-new-';
DELETE FROM Student where ID = '-new-';
SELECT *
  FROM Student S, Grade_points G
 WHERE S.ID = G.student_id AND
       S.ID = '-new-';
SELECT * FROM Grade_points where student_id = '_new-';  ''',
'''PRAGMA FOREIGN_KEYS=ON;
INSERT INTO Grade_points (student_id, GPA)
            SELECT ID, 4.1
              FROM Student 
             ORDER BY name DESC
             LIMIT 1''',
'''PRAGMA FOREIGN_KEYS=ON;
INSERT INTO Grade_points (student_id, GPA)
            SELECT ID, -1
              FROM Student
             ORDER BY name ASC
             LIMIT 1''',
'''PRAGMA FOREIGN_KEYS=ON;
INSERT INTO Grade_points (student_id, GPA)
            SELECT ID, -0.001
              FROM Student
             ORDER BY name ASC
             LIMIT 1''',
'''PRAGMA FOREIGN_KEYS=ON;
INSERT INTO Grade_points (student_id, GPA)
            SELECT ID, 4.1
              FROM Student 
             ORDER BY name DESC
             LIMIT 1''',
              ]

num_empties = ['zero', 'one', 'two', 'three'][len(dbs)]
%>
**NOTE$_1$:** The GPA should be a real number between zero and four, inclusive.  
**NOTE$_2$:** The student_id should match an ID from the student table such that if a student leaves the university, the tuple representing their GPA is deleted.  
**NOTE$_3$:** You should see {{num_empties}} Empty green results and {{len(ics)*len(dbs)}} more green tests to receive any credit for this question
**NOTE$_4$:** You may want to prefix your SQL command with a DROP command so that if you re-execute your cell you will not get an error.  
**NOTE$_5$:** If you execute this cell mulitple times to get the correct answer, I recommend you refresh your browser which gets you a fresh database, then execute your answer. 
Alternatively you can add a drop table command  
**NOTE$_6$:** Remember you must get all tests showing green to get any credit.
{{!sql(answer, ics=ics, points=10, name='Create.Table.Grade.Points', sort=True, dbs=dbs)}}
% include('viewAnswer')

**Insert.Grade.Point.Student.23121:** Insert the GPA of 3.875 for student with ID of 23121 into table Grade_points.  
<%
answer = '''
DELETE FROM Grade_points WHERE student_id = '23121';
INSERT INTO Grade_points (student_id, GPA)
                  VALUES ('23121', 3.875);
'''
ics = [
'''PRAGMA FOREIGN_KEYS=ON;
SELECT *
  FROM Student S, Grade_points G
 WHERE S.ID = G.student_id
'''
              ]

num_empties = ['zero', 'one', 'two', 'three'][len(dbs)]
%>
**NOTE$_1$:** You must correctly answer the previous question and execute it after each refresh for this question to get a green light for this question.  
**NOTE$_2$:** You should see {{num_empties}} Empty green results and {{len(ics)*len(dbs)}} more green tests to list the insert  
**NOTE$_3$:** If you execute this cell mulitple times to get the correct answer, I recommend you refresh your browser which gets you a fresh database, then execute your answer.  
**NOTE$_4$:** Remember you must get all tests showing green to get any credit.
{{!sql(answer, ics=ics, points=10, name='Insert.Grade.Point.Student.23121', sort=True, dbs=dbs)}}
% include('viewAnswer')


**Delete.Grade.Point.Student.23121:** Delete the GPA of 3.875 for student with ID of 23121 from table Grade_points.  
<%
answer = '''
DELETE FROM Grade_points WHERE student_id = '23121';
'''
ics = [
'''PRAGMA FOREIGN_KEYS=ON;
SELECT * FROM Grade_Points;
''',
'''PRAGMA FOREIGN_KEYS=ON;
SELECT * FROM Student;
''',
              ]

num_empties = ['zero', 'one', 'two', 'three'][len(dbs)]
%>
**NOTE$_1$:** You must correctly answer the previous two questions and execute it after each refresh for this question to get a green light for this question.  
**NOTE$_2$:** You should see {{num_empties}} Empty green results and {{len(ics)*len(dbs)}} more green tests to list the insert  
**NOTE$_3$:** If you execute this cell mulitple times to get the correct answer, I recommend you refresh your browser which gets you a fresh database, then execute your answer.  
**NOTE$_4$:** Remember you must get all tests showing green to get any credit.
{{!sql(answer, ics=ics, points=10, name='Delete.Grade.Point.Student.23121', sort=True, dbs=dbs)}}
% include('viewAnswer')



% include('worksheet-submit.md')
