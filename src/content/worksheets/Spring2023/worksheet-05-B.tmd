<%
import json
setInfo(
      due="2023-02-16 10:45:00",
      needsSubmitCode=True,
      assessment_type='worksheet',
			pages=['questions', 'submit'],
      penalty=1,
      maxpenalty=1,
      points_limit=100,
      exceptions=dict(_003=dict(needsSubmitCode=False),
                      pradyun=dict(needsSubmitCode=False, due='2022-09-13 00:00:00'),
                      tntran3=dict(needsSubmitCode=False, due='2022-09-13 00:00:00'),
                      lside=dict(needsSubmitCode=False, due='2022-09-13 00:00:00'),
                      )
)
with open('content/worksheets/sailors.json', encoding='utf-8') as fid:
    schema = json.load(fid)
dbs = ['sailors.sqlite', 'sailors1.sqlite']
%>

# Chapter 5.5 Aggregate Operators & Left Joins

<img src="{{LOGO}}" style="float:right; vertical-align:0px; width=50%"/>

% include('worksheet-dont-panic.md')
% include('green-highlight.md')

---

## {{!linkable_header('Worksheet schema')}}

Here is the schema used in this worksheet:

```sql
 % for line in schema.split('\n'):
    {{!line}}
 % end
```

---

## {{!linkable_header('SQL Tutorial Cheat Sheet')}}

Following are three SQL tutorial cheat sheets available from http://www.sqltutorial.org

<img src="{{static('images/SQLTutorial.1.jpeg')}}" style="width:85%" alt="First of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.2.jpeg')}}" style="width:85%" alt="Second of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.3.jpeg')}}" style="width:85%" alt="Third of three SQL Tutorial cheat sheets"/>

---

## {{!linkable_header('Questions')}}

% if 'questions' in pages:

---

**<font size="+.5" color="red"> You only have to answer four of the <b>six</b> questions to get a 100%</font>**  
**Only three questions are needed to get a 75% which, if handed in early, constitutes a 100%**   

**Question.25**: Find the average age of all sailors.   
% answer = f'''
SELECT AVG(S.age)
  FROM Sailors AS S'''
{{!sql(answer, dbs=dbs, points=25, name='Question.25', sort=True)}}
% include('viewAnswer')

---

**Question.27:** Find the name and age of the oldest sailor.  
% answer = f'''
WITH T1 AS (SELECT MAX(S.age) AS age
              FROM Sailors AS S)

SELECT S.sname, S.age
  FROM Sailors AS S, T1
 WHERE S.age=T1.age
'''
{{!sql(answer, dbs=dbs, points=25, name='Question.27', sort=True)}}
% include('viewAnswer')

---

**Question.28:** Count the number of sailors.  
% answer = f'''
SELECT COUNT(*)
  FROM Sailors AS S
'''
{{!sql(answer, dbs=dbs, points=25, name='Question.28', sort=True)}}
% include('viewAnswer')

---

**Question.30:** Find the names of the sailors that are more senior in age than the oldest sailor with a rating of 10.   
% answer = f'''
SELECT S.sname
  FROM Sailors AS S
 WHERE S.age > (SELECT MAX(S2.age)
                  FROM Sailors S2
                 WHERE S2.rating = 10) 
'''
{{!sql(answer, dbs=dbs, points=25, name='Question.30', sort=True)}}
% include('viewAnswer')

---

**Question.xx:** Find the names of sailors who have a rating higher than Lubber.  
% answer = f'''
SELECT S.sname
  FROM Sailors AS S
 WHERE S.rating > (SELECT S2.rating
                     FROM Sailors S2
                    WHERE S2.sname = 'Lubber')
'''
{{!sql(answer, dbs=dbs, points=25, name='Question.xx', sort=True)}}
% include('viewAnswer')

---

**Left.Join:** Find all the names of sailors who reserved boat 101.
Return the name of the sailor and the first day they rented boat 101.
If they never rented a boat 101, use Null in the day.
% answer = f'''
SELECT S.sname, min(R.day)
  FROM Sailors AS S
  LEFT JOIN Reserves R ON S.sid=R.sid AND R.bid=101
  GROUP BY S.sname
'''
{{!sql(answer, dbs=dbs, points=25, name='Left.Join', sort=True)}}
% include('viewAnswer')

---

% end
% if 'submit' in pages:

% include('worksheet-pledge.md')
% include('submit.md')
%end
