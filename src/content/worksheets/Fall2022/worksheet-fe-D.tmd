<%
setInfo(
        due='2021-11-30 15:01:00',
        duration=10,
        exam=False,
        needsSubmitCode=True,
        exceptions=dict(gksrb32=dict(due='2021-12-01 00:00:00', needsSubmitCode=False),
                        _003=dict(needsSubmitCode=False, duration=999)),
        pages=['questions', 'submit'],
        maxpenalty=0.75, penalty=.2,
        )
dbs=['books1.sqlite', 'books2.sqlite']
%>

<img src="{{static('images/COMP421Logo.png')}}" style="float:right; vertical-align:0px"/>

# Mock FE-D Counting photos

% include('worksheet-dont-panic.md')
% include('green-highlight.md')

--- 

## Questions

% if 'questions' in pages:

```sql
CREATE TABLE authors (
          login text primary key,
          email text,
          first_name text,
          last_name text
      )

CREATE TABLE books (
          id integer primary key autoincrement,
          title text,
          author text references authors(login),
          language text,
          created date
      )

CREATE TABLE photos (
          id integer primary key autoincrement,
          url text unique,
          width integer,
          height integer
      )

CREATE TABLE pages (
          book integer references books(id),
          number integer,
          photo integer references photos(id),
          caption text,
          primary key (book, number)
      )

CREATE TABLE categories (
          category text,
          book integer references books(id),
          unique (book, category)
      )

CREATE VIEW pagecounts as
          select book, count(*) as count from pages group by book
```
---

The last query on this worksheet might be a question on the final exam.
If it were, notice how I worked through the question in pieces?
I wouldn't try to solve the question in one try.

This is similar to how you wouldn't write 100 lines of code and then test it.
You need to start with small pieces of code and work your way up to the final solution.

---

**Photo.Widths:** What are all the possible widths of any photo in the database?  
Give the list of possible widths from largest to smallest width.
% answer = '''
SELECT DISTINCT width
  FROM Photos
 ORDER BY width DESC;
'''
{{!sql(answer, dbs=dbs, sort=0, points=20, name='Photo.Widths')}}
% include('viewAnswer')

---

**Photo.Max.Width:** What is the maximum width of any photo in the database?
% answer = '''
SELECT max(width)
  FROM Photos
 GROUP BY id
 LIMIT 1;
'''
{{!sql(answer, dbs=dbs, sort=1, points=20, name='Photo.Max.Width')}}
% include('viewAnswer')

---

**Photo.Max.Area:** What is the maximum area (width times height) of any photo in the database?
% answer = '''
SELECT max(width * height) as M
  FROM Photos
 GROUP BY id
 ORDER BY m DESC
 Limit 1;
'''
{{!sql(answer, dbs=dbs, sort=1, points=20, name='Photo.Max.Area')}}
% include('viewAnswer')

---

**Number.Common.Photo.Size:** How many times does the most common photo size (width, height) appear in the database?  
% answer = '''
SELECT count(*) as M
  FROM Photos
 GROUP BY width, height
 ORDER BY m DESC
 Limit 1;
'''
{{!sql(answer, dbs=dbs, sort=1, points=20, name='Number.Common.Photo.Size')}}
% include('viewAnswer')


---

**Most.Common.Photo.Size:** What is the most common photo size(s) (width, height) and how often does it appear?  
% answer = '''
WITH M as (SELECT count(*) as max_count
             FROM Photos
            GROUP BY width, height
            ORDER BY max_count DESC
            Limit 1)
SELECT width, height, count(*) as a_count
  FROM Photos, M
 GROUP BY width, height
 HAVING M.max_count=a_count
'''
{{!sql(answer, dbs=dbs, sort=1, points=20, name='Most.Common.Photo.Size')}}
% include('viewAnswer')

%end

---

% if 'submit' in pages:
% include('worksheet-pledge.md')
% include('submit.md')
% end
