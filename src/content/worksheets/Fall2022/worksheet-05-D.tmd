<%
import json
setInfo(
      due="2022-10-03 10:55:00",
      needsSubmitCode=True,
      assessment_type='worksheet',
			pages=['questions', 'submit'],
      penalty=1,
      maxpenalty=1,
      points_limit=100,
      exceptions=dict(_003=dict(needsSubmitCode=False),
                      samart=dict(needsSubmitCode=False, due='2022-10-04 00:00:00'),
                      )
)
with open('content/worksheets/sailors.json', encoding='utf-8') as fid:
    schema = json.load(fid)
dbs = ['sailors.sqlite', 'sailors1.sqlite']
%>

# Chapter 5 Left Join

<img src="{{LOGO}}" style="float:right; vertical-align:0px; width=50%"/>

% include('worksheet-dont-panic.md')
% include('green-highlight.md')

---

## {{!linkable_header('Worksheet schema')}}

Here is the schema used in this worksheet:

```sql
 % for line in schema.split('\n'):
    {{!line}}
 % end
```

---

## {{!linkable_header('SQL Tutorial Cheat Sheet')}}

Following are three SQL tutorial cheat sheets available from http://www.sqltutorial.org

<img src="{{static('images/SQLTutorial.1.jpeg')}}" style="width:85%" alt="First of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.2.jpeg')}}" style="width:85%" alt="Second of three SQL Tutorial cheat sheets"/>
<img src="{{static('images/SQLTutorial.3.jpeg')}}" style="width:85%" alt="Third of three SQL Tutorial cheat sheets"/>

---

## {{!linkable_header('Questions')}}

**<font size="+.5" color="red"> There are a total of 120 points on this worksheet.
It is possible to get a 100% without answer all of the questions</font>**  

% if 'questions' in pages:

---

**Insert:** Insert a sailor named John, with a sid of 116, a rating of -1, and an age of 100.  
**NOTE$_1$:** If you need to run this command multiple times, you may need to refresh the database.  
**NOTE$_2$:** Since any command that returns an Empty result will turn the answer green, it is only worth one point.  
% answer = f'''
INSERT INTO Sailors (sname, sid, rating, age)
             Values ('John', 116, -1, 100)
'''
{{!sql(answer, dbs=dbs, points=1, name='Insert', sort=True)}}
% include('viewAnswer')

---

**List.1:** List all the sailors' names, their sid, their rating, and their age.  
**NOTE:** This assumes the previous command worked.  
% answer = f'''
SELECT sname, sid, rating, age
  FROM Sailors
'''
{{!sql(answer, dbs=dbs, points=19, name='List.1', sort=True)}}
% include('viewAnswer')

---

**Update:** Change sailor John's rating to 7.  
**NOTE$_1$:** If you need to run this command multiple times, you may need to refresh the database.  
**NOTE$_2$:** Since any command that returns an Empty result will turn the answer green, it is only worth one point.  
% answer = f'''
UPDATE Sailors
   SET rating = 7
 WHERE sname = 'John'
'''
{{!sql(answer, dbs=dbs, points=1, name='Update', sort=True)}}
% include('viewAnswer')

---

**List.2:** List all the sailors' names, their sid, their rating, and their age.  
**NOTE:** This assumes the previous two commands worked.  
% answer = f'''
SELECT sname, sid, rating, age
  FROM Sailors
'''
{{!sql(answer, dbs=dbs, points=19, name='List.2', sort=True)}}
% include('viewAnswer')

---

**First.Reserve.118:** List the sailor's name(s) and sid who first reserved boat 118.
Also, give the date that they first reserved boat 118.
% answer = f'''
SELECT S.sname, S.sid, min(R.day)
  FROM Sailors S, Reserves R
  WHERE S.sid = R.sid AND
        R.bid = 118 AND
        R.day = (SELECT min(day) 
                   FROM Reserves
                  WHERE bid=118)
  GROUP BY S.sid                 
'''
{{!sql(answer, dbs=dbs, points=20, name='First.Reserve.118', sort=True)}}
% include('viewAnswer')

---

**Last.Boat.Used.By.A.Sailor:** List each boat's name along with the name of the last sailor to use the boat
and the day it was used.  
% answer = f'''
SELECT B.bname, S.sname, max(R.day)
  FROM Sailors AS S, Boats AS B, Reserves as R
 WHERE R.sid = S.sid AND
       R.bid = B.bid 
  GROUP BY B.bid
'''
{{!sql(answer, dbs=dbs, points=20, name='Last.Boat.Used.By.A.Sailor', sort=True)}}
% include('viewAnswer')
---

**All.Sailors.2:** List **all** the sailors' names alphabetically along with their sid and the days they reserved any boat.
If they've never reserved a boat, leave the field null.
% answer = f'''
SELECT sname, S.sid, R.day
  FROM Sailors S
  LEFT JOIN Reserves R
    ON R.sid=S.sid
  ORDER BY s.sname
'''
{{!sql(answer, dbs=dbs, points=20, name='All.Sailors.2')}}
% include('viewAnswer')

---

**Boat.2013-06-2.** List all the boat ids in ascending order and the sailor names that reserved them on '2013-06-2'.
If any boat was not reserved on '2013-06-2', then leave the sailor name null.
% answer = f'''
SELECT B.bid, sname
  FROM Boats B
  LEFT JOIN (SELECT * 
               FROM Sailors S, Reserves R
              WHERE R.day = '2013-06-2' AND
                    S.sid = R.sid) AS X
    ON B.bid = X.bid
   ORDER BY B.bid
'''
{{!sql(answer, dbs=dbs, points=20, name='Last.To.Use.A.Boat')}}
% include('viewAnswer')



---

% end
% if 'submit' in pages:

% include('worksheet-pledge.md')
% include('submit.md')
%end
